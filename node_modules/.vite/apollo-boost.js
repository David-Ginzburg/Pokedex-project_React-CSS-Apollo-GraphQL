import {
  BREAK,
  lib_default,
  print,
  visit
} from "./chunk-GTE626CI.js";
import {
  __commonJS,
  __toModule
} from "./chunk-HV27UI33.js";

// node_modules/fast-json-stable-stringify/index.js
var require_fast_json_stable_stringify = __commonJS({
  "node_modules/fast-json-stable-stringify/index.js"(exports, module2) {
    "use strict";
    module2.exports = function(data, opts) {
      if (!opts)
        opts = {};
      if (typeof opts === "function")
        opts = { cmp: opts };
      var cycles = typeof opts.cycles === "boolean" ? opts.cycles : false;
      var cmp = opts.cmp && function(f) {
        return function(node) {
          return function(a, b) {
            var aobj = { key: a, value: node[a] };
            var bobj = { key: b, value: node[b] };
            return f(aobj, bobj);
          };
        };
      }(opts.cmp);
      var seen = [];
      return function stringify2(node) {
        if (node && node.toJSON && typeof node.toJSON === "function") {
          node = node.toJSON();
        }
        if (node === void 0)
          return;
        if (typeof node == "number")
          return isFinite(node) ? "" + node : "null";
        if (typeof node !== "object")
          return JSON.stringify(node);
        var i, out;
        if (Array.isArray(node)) {
          out = "[";
          for (i = 0; i < node.length; i++) {
            if (i)
              out += ",";
            out += stringify2(node[i]) || "null";
          }
          return out + "]";
        }
        if (node === null)
          return "null";
        if (seen.indexOf(node) !== -1) {
          if (cycles)
            return JSON.stringify("__cycle__");
          throw new TypeError("Converting circular structure to JSON");
        }
        var seenIndex = seen.push(node) - 1;
        var keys = Object.keys(node).sort(cmp && cmp(node));
        out = "";
        for (i = 0; i < keys.length; i++) {
          var key = keys[i];
          var value = stringify2(node[key]);
          if (!value)
            continue;
          if (out)
            out += ",";
          out += JSON.stringify(key) + ":" + value;
        }
        seen.splice(seenIndex, 1);
        return "{" + out + "}";
      }(data);
    };
  }
});

// node_modules/zen-observable/lib/Observable.js
var require_Observable = __commonJS({
  "node_modules/zen-observable/lib/Observable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Observable = void 0;
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var hasSymbols = function() {
      return typeof Symbol === "function";
    };
    var hasSymbol = function(name) {
      return hasSymbols() && Boolean(Symbol[name]);
    };
    var getSymbol = function(name) {
      return hasSymbol(name) ? Symbol[name] : "@@" + name;
    };
    if (hasSymbols() && !hasSymbol("observable")) {
      Symbol.observable = Symbol("observable");
    }
    var SymbolIterator = getSymbol("iterator");
    var SymbolObservable = getSymbol("observable");
    var SymbolSpecies = getSymbol("species");
    function getMethod(obj, key) {
      var value = obj[key];
      if (value == null)
        return void 0;
      if (typeof value !== "function")
        throw new TypeError(value + " is not a function");
      return value;
    }
    function getSpecies(obj) {
      var ctor = obj.constructor;
      if (ctor !== void 0) {
        ctor = ctor[SymbolSpecies];
        if (ctor === null) {
          ctor = void 0;
        }
      }
      return ctor !== void 0 ? ctor : Observable3;
    }
    function isObservable(x) {
      return x instanceof Observable3;
    }
    function hostReportError(e) {
      if (hostReportError.log) {
        hostReportError.log(e);
      } else {
        setTimeout(function() {
          throw e;
        });
      }
    }
    function enqueue(fn) {
      Promise.resolve().then(function() {
        try {
          fn();
        } catch (e) {
          hostReportError(e);
        }
      });
    }
    function cleanupSubscription(subscription) {
      var cleanup = subscription._cleanup;
      if (cleanup === void 0)
        return;
      subscription._cleanup = void 0;
      if (!cleanup) {
        return;
      }
      try {
        if (typeof cleanup === "function") {
          cleanup();
        } else {
          var unsubscribe = getMethod(cleanup, "unsubscribe");
          if (unsubscribe) {
            unsubscribe.call(cleanup);
          }
        }
      } catch (e) {
        hostReportError(e);
      }
    }
    function closeSubscription(subscription) {
      subscription._observer = void 0;
      subscription._queue = void 0;
      subscription._state = "closed";
    }
    function flushSubscription(subscription) {
      var queue = subscription._queue;
      if (!queue) {
        return;
      }
      subscription._queue = void 0;
      subscription._state = "ready";
      for (var i = 0; i < queue.length; ++i) {
        notifySubscription(subscription, queue[i].type, queue[i].value);
        if (subscription._state === "closed")
          break;
      }
    }
    function notifySubscription(subscription, type, value) {
      subscription._state = "running";
      var observer = subscription._observer;
      try {
        var m = getMethod(observer, type);
        switch (type) {
          case "next":
            if (m)
              m.call(observer, value);
            break;
          case "error":
            closeSubscription(subscription);
            if (m)
              m.call(observer, value);
            else
              throw value;
            break;
          case "complete":
            closeSubscription(subscription);
            if (m)
              m.call(observer);
            break;
        }
      } catch (e) {
        hostReportError(e);
      }
      if (subscription._state === "closed")
        cleanupSubscription(subscription);
      else if (subscription._state === "running")
        subscription._state = "ready";
    }
    function onNotify(subscription, type, value) {
      if (subscription._state === "closed")
        return;
      if (subscription._state === "buffering") {
        subscription._queue.push({
          type,
          value
        });
        return;
      }
      if (subscription._state !== "ready") {
        subscription._state = "buffering";
        subscription._queue = [{
          type,
          value
        }];
        enqueue(function() {
          return flushSubscription(subscription);
        });
        return;
      }
      notifySubscription(subscription, type, value);
    }
    var Subscription = function() {
      function Subscription2(observer, subscriber) {
        _classCallCheck(this, Subscription2);
        this._cleanup = void 0;
        this._observer = observer;
        this._queue = void 0;
        this._state = "initializing";
        var subscriptionObserver = new SubscriptionObserver(this);
        try {
          this._cleanup = subscriber.call(void 0, subscriptionObserver);
        } catch (e) {
          subscriptionObserver.error(e);
        }
        if (this._state === "initializing")
          this._state = "ready";
      }
      _createClass(Subscription2, [{
        key: "unsubscribe",
        value: function unsubscribe() {
          if (this._state !== "closed") {
            closeSubscription(this);
            cleanupSubscription(this);
          }
        }
      }, {
        key: "closed",
        get: function() {
          return this._state === "closed";
        }
      }]);
      return Subscription2;
    }();
    var SubscriptionObserver = function() {
      function SubscriptionObserver2(subscription) {
        _classCallCheck(this, SubscriptionObserver2);
        this._subscription = subscription;
      }
      _createClass(SubscriptionObserver2, [{
        key: "next",
        value: function next(value) {
          onNotify(this._subscription, "next", value);
        }
      }, {
        key: "error",
        value: function error(value) {
          onNotify(this._subscription, "error", value);
        }
      }, {
        key: "complete",
        value: function complete() {
          onNotify(this._subscription, "complete");
        }
      }, {
        key: "closed",
        get: function() {
          return this._subscription._state === "closed";
        }
      }]);
      return SubscriptionObserver2;
    }();
    var Observable3 = function() {
      function Observable4(subscriber) {
        _classCallCheck(this, Observable4);
        if (!(this instanceof Observable4))
          throw new TypeError("Observable cannot be called as a function");
        if (typeof subscriber !== "function")
          throw new TypeError("Observable initializer must be a function");
        this._subscriber = subscriber;
      }
      _createClass(Observable4, [{
        key: "subscribe",
        value: function subscribe(observer) {
          if (typeof observer !== "object" || observer === null) {
            observer = {
              next: observer,
              error: arguments[1],
              complete: arguments[2]
            };
          }
          return new Subscription(observer, this._subscriber);
        }
      }, {
        key: "forEach",
        value: function forEach(fn) {
          var _this = this;
          return new Promise(function(resolve, reject) {
            if (typeof fn !== "function") {
              reject(new TypeError(fn + " is not a function"));
              return;
            }
            function done() {
              subscription.unsubscribe();
              resolve();
            }
            var subscription = _this.subscribe({
              next: function(value) {
                try {
                  fn(value, done);
                } catch (e) {
                  reject(e);
                  subscription.unsubscribe();
                }
              },
              error: reject,
              complete: resolve
            });
          });
        }
      }, {
        key: "map",
        value: function map(fn) {
          var _this2 = this;
          if (typeof fn !== "function")
            throw new TypeError(fn + " is not a function");
          var C = getSpecies(this);
          return new C(function(observer) {
            return _this2.subscribe({
              next: function(value) {
                try {
                  value = fn(value);
                } catch (e) {
                  return observer.error(e);
                }
                observer.next(value);
              },
              error: function(e) {
                observer.error(e);
              },
              complete: function() {
                observer.complete();
              }
            });
          });
        }
      }, {
        key: "filter",
        value: function filter(fn) {
          var _this3 = this;
          if (typeof fn !== "function")
            throw new TypeError(fn + " is not a function");
          var C = getSpecies(this);
          return new C(function(observer) {
            return _this3.subscribe({
              next: function(value) {
                try {
                  if (!fn(value))
                    return;
                } catch (e) {
                  return observer.error(e);
                }
                observer.next(value);
              },
              error: function(e) {
                observer.error(e);
              },
              complete: function() {
                observer.complete();
              }
            });
          });
        }
      }, {
        key: "reduce",
        value: function reduce(fn) {
          var _this4 = this;
          if (typeof fn !== "function")
            throw new TypeError(fn + " is not a function");
          var C = getSpecies(this);
          var hasSeed = arguments.length > 1;
          var hasValue = false;
          var seed = arguments[1];
          var acc = seed;
          return new C(function(observer) {
            return _this4.subscribe({
              next: function(value) {
                var first = !hasValue;
                hasValue = true;
                if (!first || hasSeed) {
                  try {
                    acc = fn(acc, value);
                  } catch (e) {
                    return observer.error(e);
                  }
                } else {
                  acc = value;
                }
              },
              error: function(e) {
                observer.error(e);
              },
              complete: function() {
                if (!hasValue && !hasSeed)
                  return observer.error(new TypeError("Cannot reduce an empty sequence"));
                observer.next(acc);
                observer.complete();
              }
            });
          });
        }
      }, {
        key: "concat",
        value: function concat2() {
          var _this5 = this;
          for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {
            sources[_key] = arguments[_key];
          }
          var C = getSpecies(this);
          return new C(function(observer) {
            var subscription;
            var index = 0;
            function startNext(next) {
              subscription = next.subscribe({
                next: function(v) {
                  observer.next(v);
                },
                error: function(e) {
                  observer.error(e);
                },
                complete: function() {
                  if (index === sources.length) {
                    subscription = void 0;
                    observer.complete();
                  } else {
                    startNext(C.from(sources[index++]));
                  }
                }
              });
            }
            startNext(_this5);
            return function() {
              if (subscription) {
                subscription.unsubscribe();
                subscription = void 0;
              }
            };
          });
        }
      }, {
        key: "flatMap",
        value: function flatMap(fn) {
          var _this6 = this;
          if (typeof fn !== "function")
            throw new TypeError(fn + " is not a function");
          var C = getSpecies(this);
          return new C(function(observer) {
            var subscriptions = [];
            var outer = _this6.subscribe({
              next: function(value) {
                if (fn) {
                  try {
                    value = fn(value);
                  } catch (e) {
                    return observer.error(e);
                  }
                }
                var inner = C.from(value).subscribe({
                  next: function(value2) {
                    observer.next(value2);
                  },
                  error: function(e) {
                    observer.error(e);
                  },
                  complete: function() {
                    var i = subscriptions.indexOf(inner);
                    if (i >= 0)
                      subscriptions.splice(i, 1);
                    completeIfDone();
                  }
                });
                subscriptions.push(inner);
              },
              error: function(e) {
                observer.error(e);
              },
              complete: function() {
                completeIfDone();
              }
            });
            function completeIfDone() {
              if (outer.closed && subscriptions.length === 0)
                observer.complete();
            }
            return function() {
              subscriptions.forEach(function(s) {
                return s.unsubscribe();
              });
              outer.unsubscribe();
            };
          });
        }
      }, {
        key: SymbolObservable,
        value: function() {
          return this;
        }
      }], [{
        key: "from",
        value: function from2(x) {
          var C = typeof this === "function" ? this : Observable4;
          if (x == null)
            throw new TypeError(x + " is not an object");
          var method = getMethod(x, SymbolObservable);
          if (method) {
            var observable = method.call(x);
            if (Object(observable) !== observable)
              throw new TypeError(observable + " is not an object");
            if (isObservable(observable) && observable.constructor === C)
              return observable;
            return new C(function(observer) {
              return observable.subscribe(observer);
            });
          }
          if (hasSymbol("iterator")) {
            method = getMethod(x, SymbolIterator);
            if (method) {
              return new C(function(observer) {
                enqueue(function() {
                  if (observer.closed)
                    return;
                  var _iteratorNormalCompletion = true;
                  var _didIteratorError = false;
                  var _iteratorError = void 0;
                  try {
                    for (var _iterator = method.call(x)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                      var _item = _step.value;
                      observer.next(_item);
                      if (observer.closed)
                        return;
                    }
                  } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                      }
                    } finally {
                      if (_didIteratorError) {
                        throw _iteratorError;
                      }
                    }
                  }
                  observer.complete();
                });
              });
            }
          }
          if (Array.isArray(x)) {
            return new C(function(observer) {
              enqueue(function() {
                if (observer.closed)
                  return;
                for (var i = 0; i < x.length; ++i) {
                  observer.next(x[i]);
                  if (observer.closed)
                    return;
                }
                observer.complete();
              });
            });
          }
          throw new TypeError(x + " is not observable");
        }
      }, {
        key: "of",
        value: function of() {
          for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            items[_key2] = arguments[_key2];
          }
          var C = typeof this === "function" ? this : Observable4;
          return new C(function(observer) {
            enqueue(function() {
              if (observer.closed)
                return;
              for (var i = 0; i < items.length; ++i) {
                observer.next(items[i]);
                if (observer.closed)
                  return;
              }
              observer.complete();
            });
          });
        }
      }, {
        key: SymbolSpecies,
        get: function() {
          return this;
        }
      }]);
      return Observable4;
    }();
    exports.Observable = Observable3;
    if (hasSymbols()) {
      Object.defineProperty(Observable3, Symbol("extensions"), {
        value: {
          symbol: SymbolObservable,
          hostReportError
        },
        configurable: true
      });
    }
  }
});

// node_modules/zen-observable/index.js
var require_zen_observable = __commonJS({
  "node_modules/zen-observable/index.js"(exports, module2) {
    module2.exports = require_Observable().Observable;
  }
});

// node_modules/tslib/tslib.es6.js
var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (b2.hasOwnProperty(p))
        d2[p] = b2[p];
  };
  return extendStatics(d, b);
};
function __extends(d, b) {
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
  __assign = Object.assign || function __assign2(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function __rest(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result2) {
      result2.done ? resolve(result2.value) : adopt(result2.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++)
    s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
      r[k] = a[j];
  return r;
}

// node_modules/ts-invariant/lib/invariant.esm.js
var genericMessage = "Invariant Violation";
var _a = Object.setPrototypeOf;
var setPrototypeOf = _a === void 0 ? function(obj, proto) {
  obj.__proto__ = proto;
  return obj;
} : _a;
var InvariantError = function(_super) {
  __extends(InvariantError2, _super);
  function InvariantError2(message) {
    if (message === void 0) {
      message = genericMessage;
    }
    var _this = _super.call(this, typeof message === "number" ? genericMessage + ": " + message + " (see https://github.com/apollographql/invariant-packages)" : message) || this;
    _this.framesToPop = 1;
    _this.name = genericMessage;
    setPrototypeOf(_this, InvariantError2.prototype);
    return _this;
  }
  return InvariantError2;
}(Error);
function invariant(condition, message) {
  if (!condition) {
    throw new InvariantError(message);
  }
}
function wrapConsoleMethod(method) {
  return function() {
    return console[method].apply(console, arguments);
  };
}
(function(invariant2) {
  invariant2.warn = wrapConsoleMethod("warn");
  invariant2.error = wrapConsoleMethod("error");
})(invariant || (invariant = {}));
var processStub = { env: {} };
if (typeof process === "object") {
  processStub = process;
} else
  try {
    Function("stub", "process = stub")(processStub);
  } catch (atLeastWeTried) {
  }

// node_modules/apollo-utilities/lib/bundle.esm.js
var import_fast_json_stable_stringify = __toModule(require_fast_json_stable_stringify());

// node_modules/apollo-utilities/node_modules/@wry/equality/lib/equality.esm.js
var _a2 = Object.prototype;
var toString = _a2.toString;
var hasOwnProperty = _a2.hasOwnProperty;
var previousComparisons = new Map();
function equal(a, b) {
  try {
    return check(a, b);
  } finally {
    previousComparisons.clear();
  }
}
function check(a, b) {
  if (a === b) {
    return true;
  }
  var aTag = toString.call(a);
  var bTag = toString.call(b);
  if (aTag !== bTag) {
    return false;
  }
  switch (aTag) {
    case "[object Array]":
      if (a.length !== b.length)
        return false;
    case "[object Object]": {
      if (previouslyCompared(a, b))
        return true;
      var aKeys = Object.keys(a);
      var bKeys = Object.keys(b);
      var keyCount = aKeys.length;
      if (keyCount !== bKeys.length)
        return false;
      for (var k = 0; k < keyCount; ++k) {
        if (!hasOwnProperty.call(b, aKeys[k])) {
          return false;
        }
      }
      for (var k = 0; k < keyCount; ++k) {
        var key = aKeys[k];
        if (!check(a[key], b[key])) {
          return false;
        }
      }
      return true;
    }
    case "[object Error]":
      return a.name === b.name && a.message === b.message;
    case "[object Number]":
      if (a !== a)
        return b !== b;
    case "[object Boolean]":
    case "[object Date]":
      return +a === +b;
    case "[object RegExp]":
    case "[object String]":
      return a == "" + b;
    case "[object Map]":
    case "[object Set]": {
      if (a.size !== b.size)
        return false;
      if (previouslyCompared(a, b))
        return true;
      var aIterator = a.entries();
      var isMap = aTag === "[object Map]";
      while (true) {
        var info = aIterator.next();
        if (info.done)
          break;
        var _a3 = info.value, aKey = _a3[0], aValue = _a3[1];
        if (!b.has(aKey)) {
          return false;
        }
        if (isMap && !check(aValue, b.get(aKey))) {
          return false;
        }
      }
      return true;
    }
  }
  return false;
}
function previouslyCompared(a, b) {
  var bSet = previousComparisons.get(a);
  if (bSet) {
    if (bSet.has(b))
      return true;
  } else {
    previousComparisons.set(a, bSet = new Set());
  }
  bSet.add(b);
  return false;
}

// node_modules/apollo-utilities/lib/bundle.esm.js
function isStringValue(value) {
  return value.kind === "StringValue";
}
function isBooleanValue(value) {
  return value.kind === "BooleanValue";
}
function isIntValue(value) {
  return value.kind === "IntValue";
}
function isFloatValue(value) {
  return value.kind === "FloatValue";
}
function isVariable(value) {
  return value.kind === "Variable";
}
function isObjectValue(value) {
  return value.kind === "ObjectValue";
}
function isListValue(value) {
  return value.kind === "ListValue";
}
function isEnumValue(value) {
  return value.kind === "EnumValue";
}
function isNullValue(value) {
  return value.kind === "NullValue";
}
function valueToObjectRepresentation(argObj, name, value, variables) {
  if (isIntValue(value) || isFloatValue(value)) {
    argObj[name.value] = Number(value.value);
  } else if (isBooleanValue(value) || isStringValue(value)) {
    argObj[name.value] = value.value;
  } else if (isObjectValue(value)) {
    var nestedArgObj_1 = {};
    value.fields.map(function(obj) {
      return valueToObjectRepresentation(nestedArgObj_1, obj.name, obj.value, variables);
    });
    argObj[name.value] = nestedArgObj_1;
  } else if (isVariable(value)) {
    var variableValue = (variables || {})[value.name.value];
    argObj[name.value] = variableValue;
  } else if (isListValue(value)) {
    argObj[name.value] = value.values.map(function(listValue) {
      var nestedArgArrayObj = {};
      valueToObjectRepresentation(nestedArgArrayObj, name, listValue, variables);
      return nestedArgArrayObj[name.value];
    });
  } else if (isEnumValue(value)) {
    argObj[name.value] = value.value;
  } else if (isNullValue(value)) {
    argObj[name.value] = null;
  } else {
    throw false ? new InvariantError(17) : new InvariantError('The inline argument "' + name.value + '" of kind "' + value.kind + '"is not supported. Use variables instead of inline arguments to overcome this limitation.');
  }
}
function storeKeyNameFromField(field, variables) {
  var directivesObj = null;
  if (field.directives) {
    directivesObj = {};
    field.directives.forEach(function(directive) {
      directivesObj[directive.name.value] = {};
      if (directive.arguments) {
        directive.arguments.forEach(function(_a3) {
          var name = _a3.name, value = _a3.value;
          return valueToObjectRepresentation(directivesObj[directive.name.value], name, value, variables);
        });
      }
    });
  }
  var argObj = null;
  if (field.arguments && field.arguments.length) {
    argObj = {};
    field.arguments.forEach(function(_a3) {
      var name = _a3.name, value = _a3.value;
      return valueToObjectRepresentation(argObj, name, value, variables);
    });
  }
  return getStoreKeyName(field.name.value, argObj, directivesObj);
}
var KNOWN_DIRECTIVES = [
  "connection",
  "include",
  "skip",
  "client",
  "rest",
  "export"
];
function getStoreKeyName(fieldName, args, directives) {
  if (directives && directives["connection"] && directives["connection"]["key"]) {
    if (directives["connection"]["filter"] && directives["connection"]["filter"].length > 0) {
      var filterKeys = directives["connection"]["filter"] ? directives["connection"]["filter"] : [];
      filterKeys.sort();
      var queryArgs_1 = args;
      var filteredArgs_1 = {};
      filterKeys.forEach(function(key) {
        filteredArgs_1[key] = queryArgs_1[key];
      });
      return directives["connection"]["key"] + "(" + JSON.stringify(filteredArgs_1) + ")";
    } else {
      return directives["connection"]["key"];
    }
  }
  var completeFieldName = fieldName;
  if (args) {
    var stringifiedArgs = (0, import_fast_json_stable_stringify.default)(args);
    completeFieldName += "(" + stringifiedArgs + ")";
  }
  if (directives) {
    Object.keys(directives).forEach(function(key) {
      if (KNOWN_DIRECTIVES.indexOf(key) !== -1)
        return;
      if (directives[key] && Object.keys(directives[key]).length) {
        completeFieldName += "@" + key + "(" + JSON.stringify(directives[key]) + ")";
      } else {
        completeFieldName += "@" + key;
      }
    });
  }
  return completeFieldName;
}
function argumentsObjectFromField(field, variables) {
  if (field.arguments && field.arguments.length) {
    var argObj_1 = {};
    field.arguments.forEach(function(_a3) {
      var name = _a3.name, value = _a3.value;
      return valueToObjectRepresentation(argObj_1, name, value, variables);
    });
    return argObj_1;
  }
  return null;
}
function resultKeyNameFromField(field) {
  return field.alias ? field.alias.value : field.name.value;
}
function isField(selection) {
  return selection.kind === "Field";
}
function isInlineFragment(selection) {
  return selection.kind === "InlineFragment";
}
function isIdValue(idObject) {
  return idObject && idObject.type === "id" && typeof idObject.generated === "boolean";
}
function toIdValue(idConfig, generated) {
  if (generated === void 0) {
    generated = false;
  }
  return __assign({ type: "id", generated }, typeof idConfig === "string" ? { id: idConfig, typename: void 0 } : idConfig);
}
function isJsonValue(jsonObject) {
  return jsonObject != null && typeof jsonObject === "object" && jsonObject.type === "json";
}
function getDirectiveInfoFromField(field, variables) {
  if (field.directives && field.directives.length) {
    var directiveObj_1 = {};
    field.directives.forEach(function(directive) {
      directiveObj_1[directive.name.value] = argumentsObjectFromField(directive, variables);
    });
    return directiveObj_1;
  }
  return null;
}
function shouldInclude(selection, variables) {
  if (variables === void 0) {
    variables = {};
  }
  return getInclusionDirectives(selection.directives).every(function(_a3) {
    var directive = _a3.directive, ifArgument = _a3.ifArgument;
    var evaledValue = false;
    if (ifArgument.value.kind === "Variable") {
      evaledValue = variables[ifArgument.value.name.value];
      false ? invariant(evaledValue !== void 0, 13) : invariant(evaledValue !== void 0, "Invalid variable referenced in @" + directive.name.value + " directive.");
    } else {
      evaledValue = ifArgument.value.value;
    }
    return directive.name.value === "skip" ? !evaledValue : evaledValue;
  });
}
function getDirectiveNames(doc) {
  var names = [];
  visit(doc, {
    Directive: function(node) {
      names.push(node.name.value);
    }
  });
  return names;
}
function hasDirectives(names, doc) {
  return getDirectiveNames(doc).some(function(name) {
    return names.indexOf(name) > -1;
  });
}
function hasClientExports(document) {
  return document && hasDirectives(["client"], document) && hasDirectives(["export"], document);
}
function isInclusionDirective(_a3) {
  var value = _a3.name.value;
  return value === "skip" || value === "include";
}
function getInclusionDirectives(directives) {
  return directives ? directives.filter(isInclusionDirective).map(function(directive) {
    var directiveArguments = directive.arguments;
    var directiveName = directive.name.value;
    false ? invariant(directiveArguments && directiveArguments.length === 1, 14) : invariant(directiveArguments && directiveArguments.length === 1, "Incorrect number of arguments for the @" + directiveName + " directive.");
    var ifArgument = directiveArguments[0];
    false ? invariant(ifArgument.name && ifArgument.name.value === "if", 15) : invariant(ifArgument.name && ifArgument.name.value === "if", "Invalid argument for the @" + directiveName + " directive.");
    var ifValue = ifArgument.value;
    false ? invariant(ifValue && (ifValue.kind === "Variable" || ifValue.kind === "BooleanValue"), 16) : invariant(ifValue && (ifValue.kind === "Variable" || ifValue.kind === "BooleanValue"), "Argument for the @" + directiveName + " directive must be a variable or a boolean value.");
    return { directive, ifArgument };
  }) : [];
}
function getFragmentQueryDocument(document, fragmentName) {
  var actualFragmentName = fragmentName;
  var fragments = [];
  document.definitions.forEach(function(definition) {
    if (definition.kind === "OperationDefinition") {
      throw false ? new InvariantError(11) : new InvariantError("Found a " + definition.operation + " operation" + (definition.name ? " named '" + definition.name.value + "'" : "") + ". No operations are allowed when using a fragment as a query. Only fragments are allowed.");
    }
    if (definition.kind === "FragmentDefinition") {
      fragments.push(definition);
    }
  });
  if (typeof actualFragmentName === "undefined") {
    false ? invariant(fragments.length === 1, 12) : invariant(fragments.length === 1, "Found " + fragments.length + " fragments. `fragmentName` must be provided when there is not exactly 1 fragment.");
    actualFragmentName = fragments[0].name.value;
  }
  var query = __assign(__assign({}, document), { definitions: __spreadArrays([
    {
      kind: "OperationDefinition",
      operation: "query",
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "FragmentSpread",
            name: {
              kind: "Name",
              value: actualFragmentName
            }
          }
        ]
      }
    }
  ], document.definitions) });
  return query;
}
function assign(target) {
  var sources = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    sources[_i - 1] = arguments[_i];
  }
  sources.forEach(function(source) {
    if (typeof source === "undefined" || source === null) {
      return;
    }
    Object.keys(source).forEach(function(key) {
      target[key] = source[key];
    });
  });
  return target;
}
function checkDocument(doc) {
  false ? invariant(doc && doc.kind === "Document", 2) : invariant(doc && doc.kind === "Document", 'Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a "gql" tag? http://docs.apollostack.com/apollo-client/core.html#gql');
  var operations = doc.definitions.filter(function(d) {
    return d.kind !== "FragmentDefinition";
  }).map(function(definition) {
    if (definition.kind !== "OperationDefinition") {
      throw false ? new InvariantError(3) : new InvariantError('Schema type definitions not allowed in queries. Found: "' + definition.kind + '"');
    }
    return definition;
  });
  false ? invariant(operations.length <= 1, 4) : invariant(operations.length <= 1, "Ambiguous GraphQL document: contains " + operations.length + " operations");
  return doc;
}
function getOperationDefinition(doc) {
  checkDocument(doc);
  return doc.definitions.filter(function(definition) {
    return definition.kind === "OperationDefinition";
  })[0];
}
function getOperationName(doc) {
  return doc.definitions.filter(function(definition) {
    return definition.kind === "OperationDefinition" && definition.name;
  }).map(function(x) {
    return x.name.value;
  })[0] || null;
}
function getFragmentDefinitions(doc) {
  return doc.definitions.filter(function(definition) {
    return definition.kind === "FragmentDefinition";
  });
}
function getQueryDefinition(doc) {
  var queryDef = getOperationDefinition(doc);
  false ? invariant(queryDef && queryDef.operation === "query", 6) : invariant(queryDef && queryDef.operation === "query", "Must contain a query definition.");
  return queryDef;
}
function getFragmentDefinition(doc) {
  false ? invariant(doc.kind === "Document", 7) : invariant(doc.kind === "Document", 'Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a "gql" tag? http://docs.apollostack.com/apollo-client/core.html#gql');
  false ? invariant(doc.definitions.length <= 1, 8) : invariant(doc.definitions.length <= 1, "Fragment must have exactly one definition.");
  var fragmentDef = doc.definitions[0];
  false ? invariant(fragmentDef.kind === "FragmentDefinition", 9) : invariant(fragmentDef.kind === "FragmentDefinition", "Must be a fragment definition.");
  return fragmentDef;
}
function getMainDefinition(queryDoc) {
  checkDocument(queryDoc);
  var fragmentDefinition;
  for (var _i = 0, _a3 = queryDoc.definitions; _i < _a3.length; _i++) {
    var definition = _a3[_i];
    if (definition.kind === "OperationDefinition") {
      var operation = definition.operation;
      if (operation === "query" || operation === "mutation" || operation === "subscription") {
        return definition;
      }
    }
    if (definition.kind === "FragmentDefinition" && !fragmentDefinition) {
      fragmentDefinition = definition;
    }
  }
  if (fragmentDefinition) {
    return fragmentDefinition;
  }
  throw false ? new InvariantError(10) : new InvariantError("Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.");
}
function createFragmentMap(fragments) {
  if (fragments === void 0) {
    fragments = [];
  }
  var symTable = {};
  fragments.forEach(function(fragment) {
    symTable[fragment.name.value] = fragment;
  });
  return symTable;
}
function getDefaultValues(definition) {
  if (definition && definition.variableDefinitions && definition.variableDefinitions.length) {
    var defaultValues = definition.variableDefinitions.filter(function(_a3) {
      var defaultValue = _a3.defaultValue;
      return defaultValue;
    }).map(function(_a3) {
      var variable = _a3.variable, defaultValue = _a3.defaultValue;
      var defaultValueObj = {};
      valueToObjectRepresentation(defaultValueObj, variable.name, defaultValue);
      return defaultValueObj;
    });
    return assign.apply(void 0, __spreadArrays([{}], defaultValues));
  }
  return {};
}
function filterInPlace(array, test, context) {
  var target = 0;
  array.forEach(function(elem, i) {
    if (test.call(this, elem, i, array)) {
      array[target++] = elem;
    }
  }, context);
  array.length = target;
  return array;
}
var TYPENAME_FIELD = {
  kind: "Field",
  name: {
    kind: "Name",
    value: "__typename"
  }
};
function isEmpty(op, fragments) {
  return op.selectionSet.selections.every(function(selection) {
    return selection.kind === "FragmentSpread" && isEmpty(fragments[selection.name.value], fragments);
  });
}
function nullIfDocIsEmpty(doc) {
  return isEmpty(getOperationDefinition(doc) || getFragmentDefinition(doc), createFragmentMap(getFragmentDefinitions(doc))) ? null : doc;
}
function getDirectiveMatcher(directives) {
  return function directiveMatcher(directive) {
    return directives.some(function(dir) {
      return dir.name && dir.name === directive.name.value || dir.test && dir.test(directive);
    });
  };
}
function removeDirectivesFromDocument(directives, doc) {
  var variablesInUse = Object.create(null);
  var variablesToRemove = [];
  var fragmentSpreadsInUse = Object.create(null);
  var fragmentSpreadsToRemove = [];
  var modifiedDoc = nullIfDocIsEmpty(visit(doc, {
    Variable: {
      enter: function(node, _key, parent) {
        if (parent.kind !== "VariableDefinition") {
          variablesInUse[node.name.value] = true;
        }
      }
    },
    Field: {
      enter: function(node) {
        if (directives && node.directives) {
          var shouldRemoveField = directives.some(function(directive) {
            return directive.remove;
          });
          if (shouldRemoveField && node.directives && node.directives.some(getDirectiveMatcher(directives))) {
            if (node.arguments) {
              node.arguments.forEach(function(arg) {
                if (arg.value.kind === "Variable") {
                  variablesToRemove.push({
                    name: arg.value.name.value
                  });
                }
              });
            }
            if (node.selectionSet) {
              getAllFragmentSpreadsFromSelectionSet(node.selectionSet).forEach(function(frag) {
                fragmentSpreadsToRemove.push({
                  name: frag.name.value
                });
              });
            }
            return null;
          }
        }
      }
    },
    FragmentSpread: {
      enter: function(node) {
        fragmentSpreadsInUse[node.name.value] = true;
      }
    },
    Directive: {
      enter: function(node) {
        if (getDirectiveMatcher(directives)(node)) {
          return null;
        }
      }
    }
  }));
  if (modifiedDoc && filterInPlace(variablesToRemove, function(v) {
    return !variablesInUse[v.name];
  }).length) {
    modifiedDoc = removeArgumentsFromDocument(variablesToRemove, modifiedDoc);
  }
  if (modifiedDoc && filterInPlace(fragmentSpreadsToRemove, function(fs) {
    return !fragmentSpreadsInUse[fs.name];
  }).length) {
    modifiedDoc = removeFragmentSpreadFromDocument(fragmentSpreadsToRemove, modifiedDoc);
  }
  return modifiedDoc;
}
function addTypenameToDocument(doc) {
  return visit(checkDocument(doc), {
    SelectionSet: {
      enter: function(node, _key, parent) {
        if (parent && parent.kind === "OperationDefinition") {
          return;
        }
        var selections = node.selections;
        if (!selections) {
          return;
        }
        var skip = selections.some(function(selection) {
          return isField(selection) && (selection.name.value === "__typename" || selection.name.value.lastIndexOf("__", 0) === 0);
        });
        if (skip) {
          return;
        }
        var field = parent;
        if (isField(field) && field.directives && field.directives.some(function(d) {
          return d.name.value === "export";
        })) {
          return;
        }
        return __assign(__assign({}, node), { selections: __spreadArrays(selections, [TYPENAME_FIELD]) });
      }
    }
  });
}
var connectionRemoveConfig = {
  test: function(directive) {
    var willRemove = directive.name.value === "connection";
    if (willRemove) {
      if (!directive.arguments || !directive.arguments.some(function(arg) {
        return arg.name.value === "key";
      })) {
        invariant.warn("Removing an @connection directive even though it does not have a key. You may want to use the key parameter to specify a store key.");
      }
    }
    return willRemove;
  }
};
function removeConnectionDirectiveFromDocument(doc) {
  return removeDirectivesFromDocument([connectionRemoveConfig], checkDocument(doc));
}
function getArgumentMatcher(config) {
  return function argumentMatcher(argument) {
    return config.some(function(aConfig) {
      return argument.value && argument.value.kind === "Variable" && argument.value.name && (aConfig.name === argument.value.name.value || aConfig.test && aConfig.test(argument));
    });
  };
}
function removeArgumentsFromDocument(config, doc) {
  var argMatcher = getArgumentMatcher(config);
  return nullIfDocIsEmpty(visit(doc, {
    OperationDefinition: {
      enter: function(node) {
        return __assign(__assign({}, node), { variableDefinitions: node.variableDefinitions.filter(function(varDef) {
          return !config.some(function(arg) {
            return arg.name === varDef.variable.name.value;
          });
        }) });
      }
    },
    Field: {
      enter: function(node) {
        var shouldRemoveField = config.some(function(argConfig) {
          return argConfig.remove;
        });
        if (shouldRemoveField) {
          var argMatchCount_1 = 0;
          node.arguments.forEach(function(arg) {
            if (argMatcher(arg)) {
              argMatchCount_1 += 1;
            }
          });
          if (argMatchCount_1 === 1) {
            return null;
          }
        }
      }
    },
    Argument: {
      enter: function(node) {
        if (argMatcher(node)) {
          return null;
        }
      }
    }
  }));
}
function removeFragmentSpreadFromDocument(config, doc) {
  function enter(node) {
    if (config.some(function(def) {
      return def.name === node.name.value;
    })) {
      return null;
    }
  }
  return nullIfDocIsEmpty(visit(doc, {
    FragmentSpread: { enter },
    FragmentDefinition: { enter }
  }));
}
function getAllFragmentSpreadsFromSelectionSet(selectionSet) {
  var allFragments = [];
  selectionSet.selections.forEach(function(selection) {
    if ((isField(selection) || isInlineFragment(selection)) && selection.selectionSet) {
      getAllFragmentSpreadsFromSelectionSet(selection.selectionSet).forEach(function(frag) {
        return allFragments.push(frag);
      });
    } else if (selection.kind === "FragmentSpread") {
      allFragments.push(selection);
    }
  });
  return allFragments;
}
function buildQueryFromSelectionSet(document) {
  var definition = getMainDefinition(document);
  var definitionOperation = definition.operation;
  if (definitionOperation === "query") {
    return document;
  }
  var modifiedDoc = visit(document, {
    OperationDefinition: {
      enter: function(node) {
        return __assign(__assign({}, node), { operation: "query" });
      }
    }
  });
  return modifiedDoc;
}
function removeClientSetsFromDocument(document) {
  checkDocument(document);
  var modifiedDoc = removeDirectivesFromDocument([
    {
      test: function(directive) {
        return directive.name.value === "client";
      },
      remove: true
    }
  ], document);
  if (modifiedDoc) {
    modifiedDoc = visit(modifiedDoc, {
      FragmentDefinition: {
        enter: function(node) {
          if (node.selectionSet) {
            var isTypenameOnly = node.selectionSet.selections.every(function(selection) {
              return isField(selection) && selection.name.value === "__typename";
            });
            if (isTypenameOnly) {
              return null;
            }
          }
        }
      }
    });
  }
  return modifiedDoc;
}
var canUseWeakMap = typeof WeakMap === "function" && !(typeof navigator === "object" && navigator.product === "ReactNative");
var toString2 = Object.prototype.toString;
function cloneDeep(value) {
  return cloneDeepHelper(value, new Map());
}
function cloneDeepHelper(val, seen) {
  switch (toString2.call(val)) {
    case "[object Array]": {
      if (seen.has(val))
        return seen.get(val);
      var copy_1 = val.slice(0);
      seen.set(val, copy_1);
      copy_1.forEach(function(child, i) {
        copy_1[i] = cloneDeepHelper(child, seen);
      });
      return copy_1;
    }
    case "[object Object]": {
      if (seen.has(val))
        return seen.get(val);
      var copy_2 = Object.create(Object.getPrototypeOf(val));
      seen.set(val, copy_2);
      Object.keys(val).forEach(function(key) {
        copy_2[key] = cloneDeepHelper(val[key], seen);
      });
      return copy_2;
    }
    default:
      return val;
  }
}
function getEnv() {
  if (typeof process !== "undefined" && "development") {
    return "development";
  }
  return "development";
}
function isEnv(env) {
  return getEnv() === env;
}
function isProduction() {
  return isEnv("production") === true;
}
function isDevelopment() {
  return isEnv("development") === true;
}
function isTest() {
  return isEnv("test") === true;
}
function tryFunctionOrLogError(f) {
  try {
    return f();
  } catch (e) {
    if (console.error) {
      console.error(e);
    }
  }
}
function graphQLResultHasError(result2) {
  return result2.errors && result2.errors.length;
}
function deepFreeze(o) {
  Object.freeze(o);
  Object.getOwnPropertyNames(o).forEach(function(prop) {
    if (o[prop] !== null && (typeof o[prop] === "object" || typeof o[prop] === "function") && !Object.isFrozen(o[prop])) {
      deepFreeze(o[prop]);
    }
  });
  return o;
}
function maybeDeepFreeze(obj) {
  if (isDevelopment() || isTest()) {
    var symbolIsPolyfilled = typeof Symbol === "function" && typeof Symbol("") === "string";
    if (!symbolIsPolyfilled) {
      return deepFreeze(obj);
    }
  }
  return obj;
}
var hasOwnProperty2 = Object.prototype.hasOwnProperty;
function mergeDeep() {
  var sources = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    sources[_i] = arguments[_i];
  }
  return mergeDeepArray(sources);
}
function mergeDeepArray(sources) {
  var target = sources[0] || {};
  var count = sources.length;
  if (count > 1) {
    var pastCopies = [];
    target = shallowCopyForMerge(target, pastCopies);
    for (var i = 1; i < count; ++i) {
      target = mergeHelper(target, sources[i], pastCopies);
    }
  }
  return target;
}
function isObject(obj) {
  return obj !== null && typeof obj === "object";
}
function mergeHelper(target, source, pastCopies) {
  if (isObject(source) && isObject(target)) {
    if (Object.isExtensible && !Object.isExtensible(target)) {
      target = shallowCopyForMerge(target, pastCopies);
    }
    Object.keys(source).forEach(function(sourceKey) {
      var sourceValue = source[sourceKey];
      if (hasOwnProperty2.call(target, sourceKey)) {
        var targetValue = target[sourceKey];
        if (sourceValue !== targetValue) {
          target[sourceKey] = mergeHelper(shallowCopyForMerge(targetValue, pastCopies), sourceValue, pastCopies);
        }
      } else {
        target[sourceKey] = sourceValue;
      }
    });
    return target;
  }
  return source;
}
function shallowCopyForMerge(value, pastCopies) {
  if (value !== null && typeof value === "object" && pastCopies.indexOf(value) < 0) {
    if (Array.isArray(value)) {
      value = value.slice(0);
    } else {
      value = __assign({ __proto__: Object.getPrototypeOf(value) }, value);
    }
    pastCopies.push(value);
  }
  return value;
}
var haveWarned = Object.create({});

// node_modules/zen-observable-ts/lib/bundle.esm.js
var import_zen_observable = __toModule(require_zen_observable());
var Observable = import_zen_observable.default;
var bundle_esm_default = Observable;

// node_modules/apollo-link/lib/bundle.esm.js
function validateOperation(operation) {
  var OPERATION_FIELDS = [
    "query",
    "operationName",
    "variables",
    "extensions",
    "context"
  ];
  for (var _i = 0, _a3 = Object.keys(operation); _i < _a3.length; _i++) {
    var key = _a3[_i];
    if (OPERATION_FIELDS.indexOf(key) < 0) {
      throw false ? new InvariantError(2) : new InvariantError("illegal argument: " + key);
    }
  }
  return operation;
}
var LinkError = function(_super) {
  __extends(LinkError2, _super);
  function LinkError2(message, link) {
    var _this = _super.call(this, message) || this;
    _this.link = link;
    return _this;
  }
  return LinkError2;
}(Error);
function isTerminating(link) {
  return link.request.length <= 1;
}
function toPromise(observable) {
  var completed = false;
  return new Promise(function(resolve, reject) {
    observable.subscribe({
      next: function(data) {
        if (completed) {
          invariant.warn("Promise Wrapper does not support multiple results from Observable");
        } else {
          completed = true;
          resolve(data);
        }
      },
      error: reject
    });
  });
}
var makePromise = toPromise;
function fromPromise(promise) {
  return new bundle_esm_default(function(observer) {
    promise.then(function(value) {
      observer.next(value);
      observer.complete();
    }).catch(observer.error.bind(observer));
  });
}
function fromError(errorValue) {
  return new bundle_esm_default(function(observer) {
    observer.error(errorValue);
  });
}
function transformOperation(operation) {
  var transformedOperation = {
    variables: operation.variables || {},
    extensions: operation.extensions || {},
    operationName: operation.operationName,
    query: operation.query
  };
  if (!transformedOperation.operationName) {
    transformedOperation.operationName = typeof transformedOperation.query !== "string" ? getOperationName(transformedOperation.query) : "";
  }
  return transformedOperation;
}
function createOperation(starting, operation) {
  var context = __assign({}, starting);
  var setContext = function(next) {
    if (typeof next === "function") {
      context = __assign({}, context, next(context));
    } else {
      context = __assign({}, context, next);
    }
  };
  var getContext = function() {
    return __assign({}, context);
  };
  Object.defineProperty(operation, "setContext", {
    enumerable: false,
    value: setContext
  });
  Object.defineProperty(operation, "getContext", {
    enumerable: false,
    value: getContext
  });
  Object.defineProperty(operation, "toKey", {
    enumerable: false,
    value: function() {
      return getKey(operation);
    }
  });
  return operation;
}
function getKey(operation) {
  var query = operation.query, variables = operation.variables, operationName = operation.operationName;
  return JSON.stringify([operationName, query, variables]);
}
function passthrough(op, forward) {
  return forward ? forward(op) : bundle_esm_default.of();
}
function toLink(handler) {
  return typeof handler === "function" ? new ApolloLink(handler) : handler;
}
function empty() {
  return new ApolloLink(function() {
    return bundle_esm_default.of();
  });
}
function from(links) {
  if (links.length === 0)
    return empty();
  return links.map(toLink).reduce(function(x, y) {
    return x.concat(y);
  });
}
function split(test, left, right) {
  var leftLink = toLink(left);
  var rightLink = toLink(right || new ApolloLink(passthrough));
  if (isTerminating(leftLink) && isTerminating(rightLink)) {
    return new ApolloLink(function(operation) {
      return test(operation) ? leftLink.request(operation) || bundle_esm_default.of() : rightLink.request(operation) || bundle_esm_default.of();
    });
  } else {
    return new ApolloLink(function(operation, forward) {
      return test(operation) ? leftLink.request(operation, forward) || bundle_esm_default.of() : rightLink.request(operation, forward) || bundle_esm_default.of();
    });
  }
}
var concat = function(first, second) {
  var firstLink = toLink(first);
  if (isTerminating(firstLink)) {
    invariant.warn(new LinkError("You are calling concat on a terminating link, which will have no effect", firstLink));
    return firstLink;
  }
  var nextLink = toLink(second);
  if (isTerminating(nextLink)) {
    return new ApolloLink(function(operation) {
      return firstLink.request(operation, function(op) {
        return nextLink.request(op) || bundle_esm_default.of();
      }) || bundle_esm_default.of();
    });
  } else {
    return new ApolloLink(function(operation, forward) {
      return firstLink.request(operation, function(op) {
        return nextLink.request(op, forward) || bundle_esm_default.of();
      }) || bundle_esm_default.of();
    });
  }
};
var ApolloLink = function() {
  function ApolloLink2(request) {
    if (request)
      this.request = request;
  }
  ApolloLink2.prototype.split = function(test, left, right) {
    return this.concat(split(test, left, right || new ApolloLink2(passthrough)));
  };
  ApolloLink2.prototype.concat = function(next) {
    return concat(this, next);
  };
  ApolloLink2.prototype.request = function(operation, forward) {
    throw false ? new InvariantError(1) : new InvariantError("request is not implemented");
  };
  ApolloLink2.empty = empty;
  ApolloLink2.from = from;
  ApolloLink2.split = split;
  ApolloLink2.execute = execute;
  return ApolloLink2;
}();
function execute(link, operation) {
  return link.request(createOperation(operation.context, transformOperation(validateOperation(operation)))) || bundle_esm_default.of();
}

// node_modules/symbol-observable/es/ponyfill.js
function symbolObservablePonyfill(root2) {
  var result2;
  var Symbol2 = root2.Symbol;
  if (typeof Symbol2 === "function") {
    if (Symbol2.observable) {
      result2 = Symbol2.observable;
    } else {
      result2 = Symbol2("observable");
      Symbol2.observable = result2;
    }
  } else {
    result2 = "@@observable";
  }
  return result2;
}

// node_modules/symbol-observable/es/index.js
var root;
if (typeof self !== "undefined") {
  root = self;
} else if (typeof window !== "undefined") {
  root = window;
} else if (typeof global !== "undefined") {
  root = global;
} else if (typeof module !== "undefined") {
  root = module;
} else {
  root = Function("return this")();
}
var result = symbolObservablePonyfill(root);
var es_default = result;

// node_modules/apollo-client/bundle.esm.js
var NetworkStatus;
(function(NetworkStatus2) {
  NetworkStatus2[NetworkStatus2["loading"] = 1] = "loading";
  NetworkStatus2[NetworkStatus2["setVariables"] = 2] = "setVariables";
  NetworkStatus2[NetworkStatus2["fetchMore"] = 3] = "fetchMore";
  NetworkStatus2[NetworkStatus2["refetch"] = 4] = "refetch";
  NetworkStatus2[NetworkStatus2["poll"] = 6] = "poll";
  NetworkStatus2[NetworkStatus2["ready"] = 7] = "ready";
  NetworkStatus2[NetworkStatus2["error"] = 8] = "error";
})(NetworkStatus || (NetworkStatus = {}));
function isNetworkRequestInFlight(networkStatus) {
  return networkStatus < 7;
}
var Observable2 = function(_super) {
  __extends(Observable3, _super);
  function Observable3() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Observable3.prototype[es_default] = function() {
    return this;
  };
  Observable3.prototype["@@observable"] = function() {
    return this;
  };
  return Observable3;
}(bundle_esm_default);
function isNonEmptyArray(value) {
  return Array.isArray(value) && value.length > 0;
}
function isApolloError(err) {
  return err.hasOwnProperty("graphQLErrors");
}
var generateErrorMessage = function(err) {
  var message = "";
  if (isNonEmptyArray(err.graphQLErrors)) {
    err.graphQLErrors.forEach(function(graphQLError) {
      var errorMessage = graphQLError ? graphQLError.message : "Error message not found.";
      message += "GraphQL error: " + errorMessage + "\n";
    });
  }
  if (err.networkError) {
    message += "Network error: " + err.networkError.message + "\n";
  }
  message = message.replace(/\n$/, "");
  return message;
};
var ApolloError = function(_super) {
  __extends(ApolloError2, _super);
  function ApolloError2(_a3) {
    var graphQLErrors = _a3.graphQLErrors, networkError = _a3.networkError, errorMessage = _a3.errorMessage, extraInfo = _a3.extraInfo;
    var _this = _super.call(this, errorMessage) || this;
    _this.graphQLErrors = graphQLErrors || [];
    _this.networkError = networkError || null;
    if (!errorMessage) {
      _this.message = generateErrorMessage(_this);
    } else {
      _this.message = errorMessage;
    }
    _this.extraInfo = extraInfo;
    _this.__proto__ = ApolloError2.prototype;
    return _this;
  }
  return ApolloError2;
}(Error);
var FetchType;
(function(FetchType2) {
  FetchType2[FetchType2["normal"] = 1] = "normal";
  FetchType2[FetchType2["refetch"] = 2] = "refetch";
  FetchType2[FetchType2["poll"] = 3] = "poll";
})(FetchType || (FetchType = {}));
var hasError = function(storeValue, policy) {
  if (policy === void 0) {
    policy = "none";
  }
  return storeValue && (storeValue.networkError || policy === "none" && isNonEmptyArray(storeValue.graphQLErrors));
};
var ObservableQuery = function(_super) {
  __extends(ObservableQuery2, _super);
  function ObservableQuery2(_a3) {
    var queryManager = _a3.queryManager, options = _a3.options, _b = _a3.shouldSubscribe, shouldSubscribe = _b === void 0 ? true : _b;
    var _this = _super.call(this, function(observer) {
      return _this.onSubscribe(observer);
    }) || this;
    _this.observers = new Set();
    _this.subscriptions = new Set();
    _this.isTornDown = false;
    _this.options = options;
    _this.variables = options.variables || {};
    _this.queryId = queryManager.generateQueryId();
    _this.shouldSubscribe = shouldSubscribe;
    var opDef = getOperationDefinition(options.query);
    _this.queryName = opDef && opDef.name && opDef.name.value;
    _this.queryManager = queryManager;
    return _this;
  }
  ObservableQuery2.prototype.result = function() {
    var _this = this;
    return new Promise(function(resolve, reject) {
      var observer = {
        next: function(result2) {
          resolve(result2);
          _this.observers.delete(observer);
          if (!_this.observers.size) {
            _this.queryManager.removeQuery(_this.queryId);
          }
          setTimeout(function() {
            subscription.unsubscribe();
          }, 0);
        },
        error: reject
      };
      var subscription = _this.subscribe(observer);
    });
  };
  ObservableQuery2.prototype.currentResult = function() {
    var result2 = this.getCurrentResult();
    if (result2.data === void 0) {
      result2.data = {};
    }
    return result2;
  };
  ObservableQuery2.prototype.getCurrentResult = function() {
    if (this.isTornDown) {
      var lastResult = this.lastResult;
      return {
        data: !this.lastError && lastResult && lastResult.data || void 0,
        error: this.lastError,
        loading: false,
        networkStatus: NetworkStatus.error
      };
    }
    var _a3 = this.queryManager.getCurrentQueryResult(this), data = _a3.data, partial = _a3.partial;
    var queryStoreValue = this.queryManager.queryStore.get(this.queryId);
    var result2;
    var fetchPolicy = this.options.fetchPolicy;
    var isNetworkFetchPolicy = fetchPolicy === "network-only" || fetchPolicy === "no-cache";
    if (queryStoreValue) {
      var networkStatus = queryStoreValue.networkStatus;
      if (hasError(queryStoreValue, this.options.errorPolicy)) {
        return {
          data: void 0,
          loading: false,
          networkStatus,
          error: new ApolloError({
            graphQLErrors: queryStoreValue.graphQLErrors,
            networkError: queryStoreValue.networkError
          })
        };
      }
      if (queryStoreValue.variables) {
        this.options.variables = __assign(__assign({}, this.options.variables), queryStoreValue.variables);
        this.variables = this.options.variables;
      }
      result2 = {
        data,
        loading: isNetworkRequestInFlight(networkStatus),
        networkStatus
      };
      if (queryStoreValue.graphQLErrors && this.options.errorPolicy === "all") {
        result2.errors = queryStoreValue.graphQLErrors;
      }
    } else {
      var loading = isNetworkFetchPolicy || partial && fetchPolicy !== "cache-only";
      result2 = {
        data,
        loading,
        networkStatus: loading ? NetworkStatus.loading : NetworkStatus.ready
      };
    }
    if (!partial) {
      this.updateLastResult(__assign(__assign({}, result2), { stale: false }));
    }
    return __assign(__assign({}, result2), { partial });
  };
  ObservableQuery2.prototype.isDifferentFromLastResult = function(newResult) {
    var snapshot = this.lastResultSnapshot;
    return !(snapshot && newResult && snapshot.networkStatus === newResult.networkStatus && snapshot.stale === newResult.stale && equal(snapshot.data, newResult.data));
  };
  ObservableQuery2.prototype.getLastResult = function() {
    return this.lastResult;
  };
  ObservableQuery2.prototype.getLastError = function() {
    return this.lastError;
  };
  ObservableQuery2.prototype.resetLastResults = function() {
    delete this.lastResult;
    delete this.lastResultSnapshot;
    delete this.lastError;
    this.isTornDown = false;
  };
  ObservableQuery2.prototype.resetQueryStoreErrors = function() {
    var queryStore = this.queryManager.queryStore.get(this.queryId);
    if (queryStore) {
      queryStore.networkError = null;
      queryStore.graphQLErrors = [];
    }
  };
  ObservableQuery2.prototype.refetch = function(variables) {
    var fetchPolicy = this.options.fetchPolicy;
    if (fetchPolicy === "cache-only") {
      return Promise.reject(false ? new InvariantError(1) : new InvariantError("cache-only fetchPolicy option should not be used together with query refetch."));
    }
    if (fetchPolicy !== "no-cache" && fetchPolicy !== "cache-and-network") {
      fetchPolicy = "network-only";
    }
    if (!equal(this.variables, variables)) {
      this.variables = __assign(__assign({}, this.variables), variables);
    }
    if (!equal(this.options.variables, this.variables)) {
      this.options.variables = __assign(__assign({}, this.options.variables), this.variables);
    }
    return this.queryManager.fetchQuery(this.queryId, __assign(__assign({}, this.options), { fetchPolicy }), FetchType.refetch);
  };
  ObservableQuery2.prototype.fetchMore = function(fetchMoreOptions) {
    var _this = this;
    false ? invariant(fetchMoreOptions.updateQuery, 2) : invariant(fetchMoreOptions.updateQuery, "updateQuery option is required. This function defines how to update the query data with the new results.");
    var combinedOptions = __assign(__assign({}, fetchMoreOptions.query ? fetchMoreOptions : __assign(__assign(__assign({}, this.options), fetchMoreOptions), { variables: __assign(__assign({}, this.variables), fetchMoreOptions.variables) })), { fetchPolicy: "network-only" });
    var qid = this.queryManager.generateQueryId();
    return this.queryManager.fetchQuery(qid, combinedOptions, FetchType.normal, this.queryId).then(function(fetchMoreResult) {
      _this.updateQuery(function(previousResult) {
        return fetchMoreOptions.updateQuery(previousResult, {
          fetchMoreResult: fetchMoreResult.data,
          variables: combinedOptions.variables
        });
      });
      _this.queryManager.stopQuery(qid);
      return fetchMoreResult;
    }, function(error) {
      _this.queryManager.stopQuery(qid);
      throw error;
    });
  };
  ObservableQuery2.prototype.subscribeToMore = function(options) {
    var _this = this;
    var subscription = this.queryManager.startGraphQLSubscription({
      query: options.document,
      variables: options.variables
    }).subscribe({
      next: function(subscriptionData) {
        var updateQuery = options.updateQuery;
        if (updateQuery) {
          _this.updateQuery(function(previous, _a3) {
            var variables = _a3.variables;
            return updateQuery(previous, {
              subscriptionData,
              variables
            });
          });
        }
      },
      error: function(err) {
        if (options.onError) {
          options.onError(err);
          return;
        }
        invariant.error("Unhandled GraphQL subscription error", err);
      }
    });
    this.subscriptions.add(subscription);
    return function() {
      if (_this.subscriptions.delete(subscription)) {
        subscription.unsubscribe();
      }
    };
  };
  ObservableQuery2.prototype.setOptions = function(opts) {
    var oldFetchPolicy = this.options.fetchPolicy;
    this.options = __assign(__assign({}, this.options), opts);
    if (opts.pollInterval) {
      this.startPolling(opts.pollInterval);
    } else if (opts.pollInterval === 0) {
      this.stopPolling();
    }
    var fetchPolicy = opts.fetchPolicy;
    return this.setVariables(this.options.variables, oldFetchPolicy !== fetchPolicy && (oldFetchPolicy === "cache-only" || oldFetchPolicy === "standby" || fetchPolicy === "network-only"), opts.fetchResults);
  };
  ObservableQuery2.prototype.setVariables = function(variables, tryFetch, fetchResults) {
    if (tryFetch === void 0) {
      tryFetch = false;
    }
    if (fetchResults === void 0) {
      fetchResults = true;
    }
    this.isTornDown = false;
    variables = variables || this.variables;
    if (!tryFetch && equal(variables, this.variables)) {
      return this.observers.size && fetchResults ? this.result() : Promise.resolve();
    }
    this.variables = this.options.variables = variables;
    if (!this.observers.size) {
      return Promise.resolve();
    }
    return this.queryManager.fetchQuery(this.queryId, this.options);
  };
  ObservableQuery2.prototype.updateQuery = function(mapFn) {
    var queryManager = this.queryManager;
    var _a3 = queryManager.getQueryWithPreviousResult(this.queryId), previousResult = _a3.previousResult, variables = _a3.variables, document = _a3.document;
    var newResult = tryFunctionOrLogError(function() {
      return mapFn(previousResult, { variables });
    });
    if (newResult) {
      queryManager.dataStore.markUpdateQueryResult(document, variables, newResult);
      queryManager.broadcastQueries();
    }
  };
  ObservableQuery2.prototype.stopPolling = function() {
    this.queryManager.stopPollingQuery(this.queryId);
    this.options.pollInterval = void 0;
  };
  ObservableQuery2.prototype.startPolling = function(pollInterval) {
    assertNotCacheFirstOrOnly(this);
    this.options.pollInterval = pollInterval;
    this.queryManager.startPollingQuery(this.options, this.queryId);
  };
  ObservableQuery2.prototype.updateLastResult = function(newResult) {
    var previousResult = this.lastResult;
    this.lastResult = newResult;
    this.lastResultSnapshot = this.queryManager.assumeImmutableResults ? newResult : cloneDeep(newResult);
    return previousResult;
  };
  ObservableQuery2.prototype.onSubscribe = function(observer) {
    var _this = this;
    try {
      var subObserver = observer._subscription._observer;
      if (subObserver && !subObserver.error) {
        subObserver.error = defaultSubscriptionObserverErrorCallback;
      }
    } catch (_a3) {
    }
    var first = !this.observers.size;
    this.observers.add(observer);
    if (observer.next && this.lastResult)
      observer.next(this.lastResult);
    if (observer.error && this.lastError)
      observer.error(this.lastError);
    if (first) {
      this.setUpQuery();
    }
    return function() {
      if (_this.observers.delete(observer) && !_this.observers.size) {
        _this.tearDownQuery();
      }
    };
  };
  ObservableQuery2.prototype.setUpQuery = function() {
    var _this = this;
    var _a3 = this, queryManager = _a3.queryManager, queryId = _a3.queryId;
    if (this.shouldSubscribe) {
      queryManager.addObservableQuery(queryId, this);
    }
    if (this.options.pollInterval) {
      assertNotCacheFirstOrOnly(this);
      queryManager.startPollingQuery(this.options, queryId);
    }
    var onError2 = function(error) {
      _this.updateLastResult(__assign(__assign({}, _this.lastResult), { errors: error.graphQLErrors, networkStatus: NetworkStatus.error, loading: false }));
      iterateObserversSafely(_this.observers, "error", _this.lastError = error);
    };
    queryManager.observeQuery(queryId, this.options, {
      next: function(result2) {
        if (_this.lastError || _this.isDifferentFromLastResult(result2)) {
          var previousResult_1 = _this.updateLastResult(result2);
          var _a4 = _this.options, query_1 = _a4.query, variables = _a4.variables, fetchPolicy_1 = _a4.fetchPolicy;
          if (queryManager.transform(query_1).hasClientExports) {
            queryManager.getLocalState().addExportedVariables(query_1, variables).then(function(variables2) {
              var previousVariables = _this.variables;
              _this.variables = _this.options.variables = variables2;
              if (!result2.loading && previousResult_1 && fetchPolicy_1 !== "cache-only" && queryManager.transform(query_1).serverQuery && !equal(previousVariables, variables2)) {
                _this.refetch();
              } else {
                iterateObserversSafely(_this.observers, "next", result2);
              }
            });
          } else {
            iterateObserversSafely(_this.observers, "next", result2);
          }
        }
      },
      error: onError2
    }).catch(onError2);
  };
  ObservableQuery2.prototype.tearDownQuery = function() {
    var queryManager = this.queryManager;
    this.isTornDown = true;
    queryManager.stopPollingQuery(this.queryId);
    this.subscriptions.forEach(function(sub) {
      return sub.unsubscribe();
    });
    this.subscriptions.clear();
    queryManager.removeObservableQuery(this.queryId);
    queryManager.stopQuery(this.queryId);
    this.observers.clear();
  };
  return ObservableQuery2;
}(Observable2);
function defaultSubscriptionObserverErrorCallback(error) {
  invariant.error("Unhandled error", error.message, error.stack);
}
function iterateObserversSafely(observers, method, argument) {
  var observersWithMethod = [];
  observers.forEach(function(obs) {
    return obs[method] && observersWithMethod.push(obs);
  });
  observersWithMethod.forEach(function(obs) {
    return obs[method](argument);
  });
}
function assertNotCacheFirstOrOnly(obsQuery) {
  var fetchPolicy = obsQuery.options.fetchPolicy;
  false ? invariant(fetchPolicy !== "cache-first" && fetchPolicy !== "cache-only", 3) : invariant(fetchPolicy !== "cache-first" && fetchPolicy !== "cache-only", "Queries that specify the cache-first and cache-only fetchPolicies cannot also be polling queries.");
}
var MutationStore = function() {
  function MutationStore2() {
    this.store = {};
  }
  MutationStore2.prototype.getStore = function() {
    return this.store;
  };
  MutationStore2.prototype.get = function(mutationId) {
    return this.store[mutationId];
  };
  MutationStore2.prototype.initMutation = function(mutationId, mutation, variables) {
    this.store[mutationId] = {
      mutation,
      variables: variables || {},
      loading: true,
      error: null
    };
  };
  MutationStore2.prototype.markMutationError = function(mutationId, error) {
    var mutation = this.store[mutationId];
    if (mutation) {
      mutation.loading = false;
      mutation.error = error;
    }
  };
  MutationStore2.prototype.markMutationResult = function(mutationId) {
    var mutation = this.store[mutationId];
    if (mutation) {
      mutation.loading = false;
      mutation.error = null;
    }
  };
  MutationStore2.prototype.reset = function() {
    this.store = {};
  };
  return MutationStore2;
}();
var QueryStore = function() {
  function QueryStore2() {
    this.store = {};
  }
  QueryStore2.prototype.getStore = function() {
    return this.store;
  };
  QueryStore2.prototype.get = function(queryId) {
    return this.store[queryId];
  };
  QueryStore2.prototype.initQuery = function(query) {
    var previousQuery = this.store[query.queryId];
    false ? invariant(!previousQuery || previousQuery.document === query.document || equal(previousQuery.document, query.document), 19) : invariant(!previousQuery || previousQuery.document === query.document || equal(previousQuery.document, query.document), "Internal Error: may not update existing query string in store");
    var isSetVariables = false;
    var previousVariables = null;
    if (query.storePreviousVariables && previousQuery && previousQuery.networkStatus !== NetworkStatus.loading) {
      if (!equal(previousQuery.variables, query.variables)) {
        isSetVariables = true;
        previousVariables = previousQuery.variables;
      }
    }
    var networkStatus;
    if (isSetVariables) {
      networkStatus = NetworkStatus.setVariables;
    } else if (query.isPoll) {
      networkStatus = NetworkStatus.poll;
    } else if (query.isRefetch) {
      networkStatus = NetworkStatus.refetch;
    } else {
      networkStatus = NetworkStatus.loading;
    }
    var graphQLErrors = [];
    if (previousQuery && previousQuery.graphQLErrors) {
      graphQLErrors = previousQuery.graphQLErrors;
    }
    this.store[query.queryId] = {
      document: query.document,
      variables: query.variables,
      previousVariables,
      networkError: null,
      graphQLErrors,
      networkStatus,
      metadata: query.metadata
    };
    if (typeof query.fetchMoreForQueryId === "string" && this.store[query.fetchMoreForQueryId]) {
      this.store[query.fetchMoreForQueryId].networkStatus = NetworkStatus.fetchMore;
    }
  };
  QueryStore2.prototype.markQueryResult = function(queryId, result2, fetchMoreForQueryId) {
    if (!this.store || !this.store[queryId])
      return;
    this.store[queryId].networkError = null;
    this.store[queryId].graphQLErrors = isNonEmptyArray(result2.errors) ? result2.errors : [];
    this.store[queryId].previousVariables = null;
    this.store[queryId].networkStatus = NetworkStatus.ready;
    if (typeof fetchMoreForQueryId === "string" && this.store[fetchMoreForQueryId]) {
      this.store[fetchMoreForQueryId].networkStatus = NetworkStatus.ready;
    }
  };
  QueryStore2.prototype.markQueryError = function(queryId, error, fetchMoreForQueryId) {
    if (!this.store || !this.store[queryId])
      return;
    this.store[queryId].networkError = error;
    this.store[queryId].networkStatus = NetworkStatus.error;
    if (typeof fetchMoreForQueryId === "string") {
      this.markQueryResultClient(fetchMoreForQueryId, true);
    }
  };
  QueryStore2.prototype.markQueryResultClient = function(queryId, complete) {
    var storeValue = this.store && this.store[queryId];
    if (storeValue) {
      storeValue.networkError = null;
      storeValue.previousVariables = null;
      if (complete) {
        storeValue.networkStatus = NetworkStatus.ready;
      }
    }
  };
  QueryStore2.prototype.stopQuery = function(queryId) {
    delete this.store[queryId];
  };
  QueryStore2.prototype.reset = function(observableQueryIds) {
    var _this = this;
    Object.keys(this.store).forEach(function(queryId) {
      if (observableQueryIds.indexOf(queryId) < 0) {
        _this.stopQuery(queryId);
      } else {
        _this.store[queryId].networkStatus = NetworkStatus.loading;
      }
    });
  };
  return QueryStore2;
}();
function capitalizeFirstLetter(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}
var LocalState = function() {
  function LocalState2(_a3) {
    var cache = _a3.cache, client = _a3.client, resolvers = _a3.resolvers, fragmentMatcher = _a3.fragmentMatcher;
    this.cache = cache;
    if (client) {
      this.client = client;
    }
    if (resolvers) {
      this.addResolvers(resolvers);
    }
    if (fragmentMatcher) {
      this.setFragmentMatcher(fragmentMatcher);
    }
  }
  LocalState2.prototype.addResolvers = function(resolvers) {
    var _this = this;
    this.resolvers = this.resolvers || {};
    if (Array.isArray(resolvers)) {
      resolvers.forEach(function(resolverGroup) {
        _this.resolvers = mergeDeep(_this.resolvers, resolverGroup);
      });
    } else {
      this.resolvers = mergeDeep(this.resolvers, resolvers);
    }
  };
  LocalState2.prototype.setResolvers = function(resolvers) {
    this.resolvers = {};
    this.addResolvers(resolvers);
  };
  LocalState2.prototype.getResolvers = function() {
    return this.resolvers || {};
  };
  LocalState2.prototype.runResolvers = function(_a3) {
    var document = _a3.document, remoteResult = _a3.remoteResult, context = _a3.context, variables = _a3.variables, _b = _a3.onlyRunForcedResolvers, onlyRunForcedResolvers = _b === void 0 ? false : _b;
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(_c) {
        if (document) {
          return [2, this.resolveDocument(document, remoteResult.data, context, variables, this.fragmentMatcher, onlyRunForcedResolvers).then(function(localResult) {
            return __assign(__assign({}, remoteResult), { data: localResult.result });
          })];
        }
        return [2, remoteResult];
      });
    });
  };
  LocalState2.prototype.setFragmentMatcher = function(fragmentMatcher) {
    this.fragmentMatcher = fragmentMatcher;
  };
  LocalState2.prototype.getFragmentMatcher = function() {
    return this.fragmentMatcher;
  };
  LocalState2.prototype.clientQuery = function(document) {
    if (hasDirectives(["client"], document)) {
      if (this.resolvers) {
        return document;
      }
      invariant.warn("Found @client directives in a query but no ApolloClient resolvers were specified. This means ApolloClient local resolver handling has been disabled, and @client directives will be passed through to your link chain.");
    }
    return null;
  };
  LocalState2.prototype.serverQuery = function(document) {
    return this.resolvers ? removeClientSetsFromDocument(document) : document;
  };
  LocalState2.prototype.prepareContext = function(context) {
    if (context === void 0) {
      context = {};
    }
    var cache = this.cache;
    var newContext = __assign(__assign({}, context), { cache, getCacheKey: function(obj) {
      if (cache.config) {
        return cache.config.dataIdFromObject(obj);
      } else {
        false ? invariant(false, 6) : invariant(false, "To use context.getCacheKey, you need to use a cache that has a configurable dataIdFromObject, like apollo-cache-inmemory.");
      }
    } });
    return newContext;
  };
  LocalState2.prototype.addExportedVariables = function(document, variables, context) {
    if (variables === void 0) {
      variables = {};
    }
    if (context === void 0) {
      context = {};
    }
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(_a3) {
        if (document) {
          return [2, this.resolveDocument(document, this.buildRootValueFromCache(document, variables) || {}, this.prepareContext(context), variables).then(function(data) {
            return __assign(__assign({}, variables), data.exportedVariables);
          })];
        }
        return [2, __assign({}, variables)];
      });
    });
  };
  LocalState2.prototype.shouldForceResolvers = function(document) {
    var forceResolvers = false;
    visit(document, {
      Directive: {
        enter: function(node) {
          if (node.name.value === "client" && node.arguments) {
            forceResolvers = node.arguments.some(function(arg) {
              return arg.name.value === "always" && arg.value.kind === "BooleanValue" && arg.value.value === true;
            });
            if (forceResolvers) {
              return BREAK;
            }
          }
        }
      }
    });
    return forceResolvers;
  };
  LocalState2.prototype.buildRootValueFromCache = function(document, variables) {
    return this.cache.diff({
      query: buildQueryFromSelectionSet(document),
      variables,
      returnPartialData: true,
      optimistic: false
    }).result;
  };
  LocalState2.prototype.resolveDocument = function(document, rootValue, context, variables, fragmentMatcher, onlyRunForcedResolvers) {
    if (context === void 0) {
      context = {};
    }
    if (variables === void 0) {
      variables = {};
    }
    if (fragmentMatcher === void 0) {
      fragmentMatcher = function() {
        return true;
      };
    }
    if (onlyRunForcedResolvers === void 0) {
      onlyRunForcedResolvers = false;
    }
    return __awaiter(this, void 0, void 0, function() {
      var mainDefinition, fragments, fragmentMap, definitionOperation, defaultOperationType, _a3, cache, client, execContext;
      return __generator(this, function(_b) {
        mainDefinition = getMainDefinition(document);
        fragments = getFragmentDefinitions(document);
        fragmentMap = createFragmentMap(fragments);
        definitionOperation = mainDefinition.operation;
        defaultOperationType = definitionOperation ? capitalizeFirstLetter(definitionOperation) : "Query";
        _a3 = this, cache = _a3.cache, client = _a3.client;
        execContext = {
          fragmentMap,
          context: __assign(__assign({}, context), {
            cache,
            client
          }),
          variables,
          fragmentMatcher,
          defaultOperationType,
          exportedVariables: {},
          onlyRunForcedResolvers
        };
        return [2, this.resolveSelectionSet(mainDefinition.selectionSet, rootValue, execContext).then(function(result2) {
          return {
            result: result2,
            exportedVariables: execContext.exportedVariables
          };
        })];
      });
    });
  };
  LocalState2.prototype.resolveSelectionSet = function(selectionSet, rootValue, execContext) {
    return __awaiter(this, void 0, void 0, function() {
      var fragmentMap, context, variables, resultsToMerge, execute2;
      var _this = this;
      return __generator(this, function(_a3) {
        fragmentMap = execContext.fragmentMap, context = execContext.context, variables = execContext.variables;
        resultsToMerge = [rootValue];
        execute2 = function(selection) {
          return __awaiter(_this, void 0, void 0, function() {
            var fragment, typeCondition;
            return __generator(this, function(_a4) {
              if (!shouldInclude(selection, variables)) {
                return [2];
              }
              if (isField(selection)) {
                return [2, this.resolveField(selection, rootValue, execContext).then(function(fieldResult) {
                  var _a5;
                  if (typeof fieldResult !== "undefined") {
                    resultsToMerge.push((_a5 = {}, _a5[resultKeyNameFromField(selection)] = fieldResult, _a5));
                  }
                })];
              }
              if (isInlineFragment(selection)) {
                fragment = selection;
              } else {
                fragment = fragmentMap[selection.name.value];
                false ? invariant(fragment, 7) : invariant(fragment, "No fragment named " + selection.name.value);
              }
              if (fragment && fragment.typeCondition) {
                typeCondition = fragment.typeCondition.name.value;
                if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {
                  return [2, this.resolveSelectionSet(fragment.selectionSet, rootValue, execContext).then(function(fragmentResult) {
                    resultsToMerge.push(fragmentResult);
                  })];
                }
              }
              return [2];
            });
          });
        };
        return [2, Promise.all(selectionSet.selections.map(execute2)).then(function() {
          return mergeDeepArray(resultsToMerge);
        })];
      });
    });
  };
  LocalState2.prototype.resolveField = function(field, rootValue, execContext) {
    return __awaiter(this, void 0, void 0, function() {
      var variables, fieldName, aliasedFieldName, aliasUsed, defaultResult, resultPromise, resolverType, resolverMap, resolve;
      var _this = this;
      return __generator(this, function(_a3) {
        variables = execContext.variables;
        fieldName = field.name.value;
        aliasedFieldName = resultKeyNameFromField(field);
        aliasUsed = fieldName !== aliasedFieldName;
        defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];
        resultPromise = Promise.resolve(defaultResult);
        if (!execContext.onlyRunForcedResolvers || this.shouldForceResolvers(field)) {
          resolverType = rootValue.__typename || execContext.defaultOperationType;
          resolverMap = this.resolvers && this.resolvers[resolverType];
          if (resolverMap) {
            resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];
            if (resolve) {
              resultPromise = Promise.resolve(resolve(rootValue, argumentsObjectFromField(field, variables), execContext.context, { field, fragmentMap: execContext.fragmentMap }));
            }
          }
        }
        return [2, resultPromise.then(function(result2) {
          if (result2 === void 0) {
            result2 = defaultResult;
          }
          if (field.directives) {
            field.directives.forEach(function(directive) {
              if (directive.name.value === "export" && directive.arguments) {
                directive.arguments.forEach(function(arg) {
                  if (arg.name.value === "as" && arg.value.kind === "StringValue") {
                    execContext.exportedVariables[arg.value.value] = result2;
                  }
                });
              }
            });
          }
          if (!field.selectionSet) {
            return result2;
          }
          if (result2 == null) {
            return result2;
          }
          if (Array.isArray(result2)) {
            return _this.resolveSubSelectedArray(field, result2, execContext);
          }
          if (field.selectionSet) {
            return _this.resolveSelectionSet(field.selectionSet, result2, execContext);
          }
        })];
      });
    });
  };
  LocalState2.prototype.resolveSubSelectedArray = function(field, result2, execContext) {
    var _this = this;
    return Promise.all(result2.map(function(item) {
      if (item === null) {
        return null;
      }
      if (Array.isArray(item)) {
        return _this.resolveSubSelectedArray(field, item, execContext);
      }
      if (field.selectionSet) {
        return _this.resolveSelectionSet(field.selectionSet, item, execContext);
      }
    }));
  };
  return LocalState2;
}();
function multiplex(inner) {
  var observers = new Set();
  var sub = null;
  return new Observable2(function(observer) {
    observers.add(observer);
    sub = sub || inner.subscribe({
      next: function(value) {
        observers.forEach(function(obs) {
          return obs.next && obs.next(value);
        });
      },
      error: function(error) {
        observers.forEach(function(obs) {
          return obs.error && obs.error(error);
        });
      },
      complete: function() {
        observers.forEach(function(obs) {
          return obs.complete && obs.complete();
        });
      }
    });
    return function() {
      if (observers.delete(observer) && !observers.size && sub) {
        sub.unsubscribe();
        sub = null;
      }
    };
  });
}
function asyncMap(observable, mapFn) {
  return new Observable2(function(observer) {
    var next = observer.next, error = observer.error, complete = observer.complete;
    var activeNextCount = 0;
    var completed = false;
    var handler = {
      next: function(value) {
        ++activeNextCount;
        new Promise(function(resolve) {
          resolve(mapFn(value));
        }).then(function(result2) {
          --activeNextCount;
          next && next.call(observer, result2);
          completed && handler.complete();
        }, function(e) {
          --activeNextCount;
          error && error.call(observer, e);
        });
      },
      error: function(e) {
        error && error.call(observer, e);
      },
      complete: function() {
        completed = true;
        if (!activeNextCount) {
          complete && complete.call(observer);
        }
      }
    };
    var sub = observable.subscribe(handler);
    return function() {
      return sub.unsubscribe();
    };
  });
}
var hasOwnProperty3 = Object.prototype.hasOwnProperty;
var QueryManager = function() {
  function QueryManager2(_a3) {
    var link = _a3.link, _b = _a3.queryDeduplication, queryDeduplication = _b === void 0 ? false : _b, store = _a3.store, _c = _a3.onBroadcast, onBroadcast = _c === void 0 ? function() {
      return void 0;
    } : _c, _d = _a3.ssrMode, ssrMode = _d === void 0 ? false : _d, _e = _a3.clientAwareness, clientAwareness = _e === void 0 ? {} : _e, localState = _a3.localState, assumeImmutableResults = _a3.assumeImmutableResults;
    this.mutationStore = new MutationStore();
    this.queryStore = new QueryStore();
    this.clientAwareness = {};
    this.idCounter = 1;
    this.queries = new Map();
    this.fetchQueryRejectFns = new Map();
    this.transformCache = new (canUseWeakMap ? WeakMap : Map)();
    this.inFlightLinkObservables = new Map();
    this.pollingInfoByQueryId = new Map();
    this.link = link;
    this.queryDeduplication = queryDeduplication;
    this.dataStore = store;
    this.onBroadcast = onBroadcast;
    this.clientAwareness = clientAwareness;
    this.localState = localState || new LocalState({ cache: store.getCache() });
    this.ssrMode = ssrMode;
    this.assumeImmutableResults = !!assumeImmutableResults;
  }
  QueryManager2.prototype.stop = function() {
    var _this = this;
    this.queries.forEach(function(_info, queryId) {
      _this.stopQueryNoBroadcast(queryId);
    });
    this.fetchQueryRejectFns.forEach(function(reject) {
      reject(false ? new InvariantError(8) : new InvariantError("QueryManager stopped while query was in flight"));
    });
  };
  QueryManager2.prototype.mutate = function(_a3) {
    var mutation = _a3.mutation, variables = _a3.variables, optimisticResponse = _a3.optimisticResponse, updateQueriesByName = _a3.updateQueries, _b = _a3.refetchQueries, refetchQueries = _b === void 0 ? [] : _b, _c = _a3.awaitRefetchQueries, awaitRefetchQueries = _c === void 0 ? false : _c, updateWithProxyFn = _a3.update, _d = _a3.errorPolicy, errorPolicy = _d === void 0 ? "none" : _d, fetchPolicy = _a3.fetchPolicy, _e = _a3.context, context = _e === void 0 ? {} : _e;
    return __awaiter(this, void 0, void 0, function() {
      var mutationId, generateUpdateQueriesInfo, self2;
      var _this = this;
      return __generator(this, function(_f) {
        switch (_f.label) {
          case 0:
            false ? invariant(mutation, 9) : invariant(mutation, "mutation option is required. You must specify your GraphQL document in the mutation option.");
            false ? invariant(!fetchPolicy || fetchPolicy === "no-cache", 10) : invariant(!fetchPolicy || fetchPolicy === "no-cache", "Mutations only support a 'no-cache' fetchPolicy. If you don't want to disable the cache, remove your fetchPolicy setting to proceed with the default mutation behavior.");
            mutationId = this.generateQueryId();
            mutation = this.transform(mutation).document;
            this.setQuery(mutationId, function() {
              return { document: mutation };
            });
            variables = this.getVariables(mutation, variables);
            if (!this.transform(mutation).hasClientExports)
              return [3, 2];
            return [4, this.localState.addExportedVariables(mutation, variables, context)];
          case 1:
            variables = _f.sent();
            _f.label = 2;
          case 2:
            generateUpdateQueriesInfo = function() {
              var ret = {};
              if (updateQueriesByName) {
                _this.queries.forEach(function(_a4, queryId) {
                  var observableQuery = _a4.observableQuery;
                  if (observableQuery) {
                    var queryName = observableQuery.queryName;
                    if (queryName && hasOwnProperty3.call(updateQueriesByName, queryName)) {
                      ret[queryId] = {
                        updater: updateQueriesByName[queryName],
                        query: _this.queryStore.get(queryId)
                      };
                    }
                  }
                });
              }
              return ret;
            };
            this.mutationStore.initMutation(mutationId, mutation, variables);
            this.dataStore.markMutationInit({
              mutationId,
              document: mutation,
              variables,
              updateQueries: generateUpdateQueriesInfo(),
              update: updateWithProxyFn,
              optimisticResponse
            });
            this.broadcastQueries();
            self2 = this;
            return [2, new Promise(function(resolve, reject) {
              var storeResult;
              var error;
              self2.getObservableFromLink(mutation, __assign(__assign({}, context), { optimisticResponse }), variables, false).subscribe({
                next: function(result2) {
                  if (graphQLResultHasError(result2) && errorPolicy === "none") {
                    error = new ApolloError({
                      graphQLErrors: result2.errors
                    });
                    return;
                  }
                  self2.mutationStore.markMutationResult(mutationId);
                  if (fetchPolicy !== "no-cache") {
                    self2.dataStore.markMutationResult({
                      mutationId,
                      result: result2,
                      document: mutation,
                      variables,
                      updateQueries: generateUpdateQueriesInfo(),
                      update: updateWithProxyFn
                    });
                  }
                  storeResult = result2;
                },
                error: function(err) {
                  self2.mutationStore.markMutationError(mutationId, err);
                  self2.dataStore.markMutationComplete({
                    mutationId,
                    optimisticResponse
                  });
                  self2.broadcastQueries();
                  self2.setQuery(mutationId, function() {
                    return { document: null };
                  });
                  reject(new ApolloError({
                    networkError: err
                  }));
                },
                complete: function() {
                  if (error) {
                    self2.mutationStore.markMutationError(mutationId, error);
                  }
                  self2.dataStore.markMutationComplete({
                    mutationId,
                    optimisticResponse
                  });
                  self2.broadcastQueries();
                  if (error) {
                    reject(error);
                    return;
                  }
                  if (typeof refetchQueries === "function") {
                    refetchQueries = refetchQueries(storeResult);
                  }
                  var refetchQueryPromises = [];
                  if (isNonEmptyArray(refetchQueries)) {
                    refetchQueries.forEach(function(refetchQuery) {
                      if (typeof refetchQuery === "string") {
                        self2.queries.forEach(function(_a4) {
                          var observableQuery = _a4.observableQuery;
                          if (observableQuery && observableQuery.queryName === refetchQuery) {
                            refetchQueryPromises.push(observableQuery.refetch());
                          }
                        });
                      } else {
                        var queryOptions = {
                          query: refetchQuery.query,
                          variables: refetchQuery.variables,
                          fetchPolicy: "network-only"
                        };
                        if (refetchQuery.context) {
                          queryOptions.context = refetchQuery.context;
                        }
                        refetchQueryPromises.push(self2.query(queryOptions));
                      }
                    });
                  }
                  Promise.all(awaitRefetchQueries ? refetchQueryPromises : []).then(function() {
                    self2.setQuery(mutationId, function() {
                      return { document: null };
                    });
                    if (errorPolicy === "ignore" && storeResult && graphQLResultHasError(storeResult)) {
                      delete storeResult.errors;
                    }
                    resolve(storeResult);
                  });
                }
              });
            })];
        }
      });
    });
  };
  QueryManager2.prototype.fetchQuery = function(queryId, options, fetchType, fetchMoreForQueryId) {
    return __awaiter(this, void 0, void 0, function() {
      var _a3, metadata, _b, fetchPolicy, _c, context, query, variables, storeResult, isNetworkOnly, needToFetch, _d, complete, result2, shouldFetch, requestId, cancel, networkResult;
      var _this = this;
      return __generator(this, function(_e) {
        switch (_e.label) {
          case 0:
            _a3 = options.metadata, metadata = _a3 === void 0 ? null : _a3, _b = options.fetchPolicy, fetchPolicy = _b === void 0 ? "cache-first" : _b, _c = options.context, context = _c === void 0 ? {} : _c;
            query = this.transform(options.query).document;
            variables = this.getVariables(query, options.variables);
            if (!this.transform(query).hasClientExports)
              return [3, 2];
            return [4, this.localState.addExportedVariables(query, variables, context)];
          case 1:
            variables = _e.sent();
            _e.label = 2;
          case 2:
            options = __assign(__assign({}, options), { variables });
            isNetworkOnly = fetchPolicy === "network-only" || fetchPolicy === "no-cache";
            needToFetch = isNetworkOnly;
            if (!isNetworkOnly) {
              _d = this.dataStore.getCache().diff({
                query,
                variables,
                returnPartialData: true,
                optimistic: false
              }), complete = _d.complete, result2 = _d.result;
              needToFetch = !complete || fetchPolicy === "cache-and-network";
              storeResult = result2;
            }
            shouldFetch = needToFetch && fetchPolicy !== "cache-only" && fetchPolicy !== "standby";
            if (hasDirectives(["live"], query))
              shouldFetch = true;
            requestId = this.idCounter++;
            cancel = fetchPolicy !== "no-cache" ? this.updateQueryWatch(queryId, query, options) : void 0;
            this.setQuery(queryId, function() {
              return {
                document: query,
                lastRequestId: requestId,
                invalidated: true,
                cancel
              };
            });
            this.invalidate(fetchMoreForQueryId);
            this.queryStore.initQuery({
              queryId,
              document: query,
              storePreviousVariables: shouldFetch,
              variables,
              isPoll: fetchType === FetchType.poll,
              isRefetch: fetchType === FetchType.refetch,
              metadata,
              fetchMoreForQueryId
            });
            this.broadcastQueries();
            if (shouldFetch) {
              networkResult = this.fetchRequest({
                requestId,
                queryId,
                document: query,
                options,
                fetchMoreForQueryId
              }).catch(function(error) {
                if (isApolloError(error)) {
                  throw error;
                } else {
                  if (requestId >= _this.getQuery(queryId).lastRequestId) {
                    _this.queryStore.markQueryError(queryId, error, fetchMoreForQueryId);
                    _this.invalidate(queryId);
                    _this.invalidate(fetchMoreForQueryId);
                    _this.broadcastQueries();
                  }
                  throw new ApolloError({ networkError: error });
                }
              });
              if (fetchPolicy !== "cache-and-network") {
                return [2, networkResult];
              }
              networkResult.catch(function() {
              });
            }
            this.queryStore.markQueryResultClient(queryId, !shouldFetch);
            this.invalidate(queryId);
            this.invalidate(fetchMoreForQueryId);
            if (this.transform(query).hasForcedResolvers) {
              return [2, this.localState.runResolvers({
                document: query,
                remoteResult: { data: storeResult },
                context,
                variables,
                onlyRunForcedResolvers: true
              }).then(function(result3) {
                _this.markQueryResult(queryId, result3, options, fetchMoreForQueryId);
                _this.broadcastQueries();
                return result3;
              })];
            }
            this.broadcastQueries();
            return [2, { data: storeResult }];
        }
      });
    });
  };
  QueryManager2.prototype.markQueryResult = function(queryId, result2, _a3, fetchMoreForQueryId) {
    var fetchPolicy = _a3.fetchPolicy, variables = _a3.variables, errorPolicy = _a3.errorPolicy;
    if (fetchPolicy === "no-cache") {
      this.setQuery(queryId, function() {
        return {
          newData: { result: result2.data, complete: true }
        };
      });
    } else {
      this.dataStore.markQueryResult(result2, this.getQuery(queryId).document, variables, fetchMoreForQueryId, errorPolicy === "ignore" || errorPolicy === "all");
    }
  };
  QueryManager2.prototype.queryListenerForObserver = function(queryId, options, observer) {
    var _this = this;
    function invoke(method, argument) {
      if (observer[method]) {
        try {
          observer[method](argument);
        } catch (e) {
          invariant.error(e);
        }
      } else if (method === "error") {
        invariant.error(argument);
      }
    }
    return function(queryStoreValue, newData) {
      _this.invalidate(queryId, false);
      if (!queryStoreValue)
        return;
      var _a3 = _this.getQuery(queryId), observableQuery = _a3.observableQuery, document = _a3.document;
      var fetchPolicy = observableQuery ? observableQuery.options.fetchPolicy : options.fetchPolicy;
      if (fetchPolicy === "standby")
        return;
      var loading = isNetworkRequestInFlight(queryStoreValue.networkStatus);
      var lastResult = observableQuery && observableQuery.getLastResult();
      var networkStatusChanged = !!(lastResult && lastResult.networkStatus !== queryStoreValue.networkStatus);
      var shouldNotifyIfLoading = options.returnPartialData || !newData && queryStoreValue.previousVariables || networkStatusChanged && options.notifyOnNetworkStatusChange || fetchPolicy === "cache-only" || fetchPolicy === "cache-and-network";
      if (loading && !shouldNotifyIfLoading) {
        return;
      }
      var hasGraphQLErrors = isNonEmptyArray(queryStoreValue.graphQLErrors);
      var errorPolicy = observableQuery && observableQuery.options.errorPolicy || options.errorPolicy || "none";
      if (errorPolicy === "none" && hasGraphQLErrors || queryStoreValue.networkError) {
        return invoke("error", new ApolloError({
          graphQLErrors: queryStoreValue.graphQLErrors,
          networkError: queryStoreValue.networkError
        }));
      }
      try {
        var data = void 0;
        var isMissing = void 0;
        if (newData) {
          if (fetchPolicy !== "no-cache" && fetchPolicy !== "network-only") {
            _this.setQuery(queryId, function() {
              return { newData: null };
            });
          }
          data = newData.result;
          isMissing = !newData.complete;
        } else {
          var lastError = observableQuery && observableQuery.getLastError();
          var errorStatusChanged = errorPolicy !== "none" && (lastError && lastError.graphQLErrors) !== queryStoreValue.graphQLErrors;
          if (lastResult && lastResult.data && !errorStatusChanged) {
            data = lastResult.data;
            isMissing = false;
          } else {
            var diffResult = _this.dataStore.getCache().diff({
              query: document,
              variables: queryStoreValue.previousVariables || queryStoreValue.variables,
              returnPartialData: true,
              optimistic: true
            });
            data = diffResult.result;
            isMissing = !diffResult.complete;
          }
        }
        var stale = isMissing && !(options.returnPartialData || fetchPolicy === "cache-only");
        var resultFromStore = {
          data: stale ? lastResult && lastResult.data : data,
          loading,
          networkStatus: queryStoreValue.networkStatus,
          stale
        };
        if (errorPolicy === "all" && hasGraphQLErrors) {
          resultFromStore.errors = queryStoreValue.graphQLErrors;
        }
        invoke("next", resultFromStore);
      } catch (networkError) {
        invoke("error", new ApolloError({ networkError }));
      }
    };
  };
  QueryManager2.prototype.transform = function(document) {
    var transformCache = this.transformCache;
    if (!transformCache.has(document)) {
      var cache = this.dataStore.getCache();
      var transformed = cache.transformDocument(document);
      var forLink = removeConnectionDirectiveFromDocument(cache.transformForLink(transformed));
      var clientQuery = this.localState.clientQuery(transformed);
      var serverQuery = this.localState.serverQuery(forLink);
      var cacheEntry_1 = {
        document: transformed,
        hasClientExports: hasClientExports(transformed),
        hasForcedResolvers: this.localState.shouldForceResolvers(transformed),
        clientQuery,
        serverQuery,
        defaultVars: getDefaultValues(getOperationDefinition(transformed))
      };
      var add = function(doc) {
        if (doc && !transformCache.has(doc)) {
          transformCache.set(doc, cacheEntry_1);
        }
      };
      add(document);
      add(transformed);
      add(clientQuery);
      add(serverQuery);
    }
    return transformCache.get(document);
  };
  QueryManager2.prototype.getVariables = function(document, variables) {
    return __assign(__assign({}, this.transform(document).defaultVars), variables);
  };
  QueryManager2.prototype.watchQuery = function(options, shouldSubscribe) {
    if (shouldSubscribe === void 0) {
      shouldSubscribe = true;
    }
    false ? invariant(options.fetchPolicy !== "standby", 11) : invariant(options.fetchPolicy !== "standby", 'client.watchQuery cannot be called with fetchPolicy set to "standby"');
    options.variables = this.getVariables(options.query, options.variables);
    if (typeof options.notifyOnNetworkStatusChange === "undefined") {
      options.notifyOnNetworkStatusChange = false;
    }
    var transformedOptions = __assign({}, options);
    return new ObservableQuery({
      queryManager: this,
      options: transformedOptions,
      shouldSubscribe
    });
  };
  QueryManager2.prototype.query = function(options) {
    var _this = this;
    false ? invariant(options.query, 12) : invariant(options.query, "query option is required. You must specify your GraphQL document in the query option.");
    false ? invariant(options.query.kind === "Document", 13) : invariant(options.query.kind === "Document", 'You must wrap the query string in a "gql" tag.');
    false ? invariant(!options.returnPartialData, 14) : invariant(!options.returnPartialData, "returnPartialData option only supported on watchQuery.");
    false ? invariant(!options.pollInterval, 15) : invariant(!options.pollInterval, "pollInterval option only supported on watchQuery.");
    return new Promise(function(resolve, reject) {
      var watchedQuery = _this.watchQuery(options, false);
      _this.fetchQueryRejectFns.set("query:" + watchedQuery.queryId, reject);
      watchedQuery.result().then(resolve, reject).then(function() {
        return _this.fetchQueryRejectFns.delete("query:" + watchedQuery.queryId);
      });
    });
  };
  QueryManager2.prototype.generateQueryId = function() {
    return String(this.idCounter++);
  };
  QueryManager2.prototype.stopQueryInStore = function(queryId) {
    this.stopQueryInStoreNoBroadcast(queryId);
    this.broadcastQueries();
  };
  QueryManager2.prototype.stopQueryInStoreNoBroadcast = function(queryId) {
    this.stopPollingQuery(queryId);
    this.queryStore.stopQuery(queryId);
    this.invalidate(queryId);
  };
  QueryManager2.prototype.addQueryListener = function(queryId, listener) {
    this.setQuery(queryId, function(_a3) {
      var listeners = _a3.listeners;
      listeners.add(listener);
      return { invalidated: false };
    });
  };
  QueryManager2.prototype.updateQueryWatch = function(queryId, document, options) {
    var _this = this;
    var cancel = this.getQuery(queryId).cancel;
    if (cancel)
      cancel();
    var previousResult = function() {
      var previousResult2 = null;
      var observableQuery = _this.getQuery(queryId).observableQuery;
      if (observableQuery) {
        var lastResult = observableQuery.getLastResult();
        if (lastResult) {
          previousResult2 = lastResult.data;
        }
      }
      return previousResult2;
    };
    return this.dataStore.getCache().watch({
      query: document,
      variables: options.variables,
      optimistic: true,
      previousResult,
      callback: function(newData) {
        _this.setQuery(queryId, function() {
          return { invalidated: true, newData };
        });
      }
    });
  };
  QueryManager2.prototype.addObservableQuery = function(queryId, observableQuery) {
    this.setQuery(queryId, function() {
      return { observableQuery };
    });
  };
  QueryManager2.prototype.removeObservableQuery = function(queryId) {
    var cancel = this.getQuery(queryId).cancel;
    this.setQuery(queryId, function() {
      return { observableQuery: null };
    });
    if (cancel)
      cancel();
  };
  QueryManager2.prototype.clearStore = function() {
    this.fetchQueryRejectFns.forEach(function(reject) {
      reject(false ? new InvariantError(16) : new InvariantError("Store reset while query was in flight (not completed in link chain)"));
    });
    var resetIds = [];
    this.queries.forEach(function(_a3, queryId) {
      var observableQuery = _a3.observableQuery;
      if (observableQuery)
        resetIds.push(queryId);
    });
    this.queryStore.reset(resetIds);
    this.mutationStore.reset();
    return this.dataStore.reset();
  };
  QueryManager2.prototype.resetStore = function() {
    var _this = this;
    return this.clearStore().then(function() {
      return _this.reFetchObservableQueries();
    });
  };
  QueryManager2.prototype.reFetchObservableQueries = function(includeStandby) {
    var _this = this;
    if (includeStandby === void 0) {
      includeStandby = false;
    }
    var observableQueryPromises = [];
    this.queries.forEach(function(_a3, queryId) {
      var observableQuery = _a3.observableQuery;
      if (observableQuery) {
        var fetchPolicy = observableQuery.options.fetchPolicy;
        observableQuery.resetLastResults();
        if (fetchPolicy !== "cache-only" && (includeStandby || fetchPolicy !== "standby")) {
          observableQueryPromises.push(observableQuery.refetch());
        }
        _this.setQuery(queryId, function() {
          return { newData: null };
        });
        _this.invalidate(queryId);
      }
    });
    this.broadcastQueries();
    return Promise.all(observableQueryPromises);
  };
  QueryManager2.prototype.observeQuery = function(queryId, options, observer) {
    this.addQueryListener(queryId, this.queryListenerForObserver(queryId, options, observer));
    return this.fetchQuery(queryId, options);
  };
  QueryManager2.prototype.startQuery = function(queryId, options, listener) {
    invariant.warn("The QueryManager.startQuery method has been deprecated");
    this.addQueryListener(queryId, listener);
    this.fetchQuery(queryId, options).catch(function() {
      return void 0;
    });
    return queryId;
  };
  QueryManager2.prototype.startGraphQLSubscription = function(_a3) {
    var _this = this;
    var query = _a3.query, fetchPolicy = _a3.fetchPolicy, variables = _a3.variables;
    query = this.transform(query).document;
    variables = this.getVariables(query, variables);
    var makeObservable = function(variables2) {
      return _this.getObservableFromLink(query, {}, variables2, false).map(function(result2) {
        if (!fetchPolicy || fetchPolicy !== "no-cache") {
          _this.dataStore.markSubscriptionResult(result2, query, variables2);
          _this.broadcastQueries();
        }
        if (graphQLResultHasError(result2)) {
          throw new ApolloError({
            graphQLErrors: result2.errors
          });
        }
        return result2;
      });
    };
    if (this.transform(query).hasClientExports) {
      var observablePromise_1 = this.localState.addExportedVariables(query, variables).then(makeObservable);
      return new Observable2(function(observer) {
        var sub = null;
        observablePromise_1.then(function(observable) {
          return sub = observable.subscribe(observer);
        }, observer.error);
        return function() {
          return sub && sub.unsubscribe();
        };
      });
    }
    return makeObservable(variables);
  };
  QueryManager2.prototype.stopQuery = function(queryId) {
    this.stopQueryNoBroadcast(queryId);
    this.broadcastQueries();
  };
  QueryManager2.prototype.stopQueryNoBroadcast = function(queryId) {
    this.stopQueryInStoreNoBroadcast(queryId);
    this.removeQuery(queryId);
  };
  QueryManager2.prototype.removeQuery = function(queryId) {
    this.fetchQueryRejectFns.delete("query:" + queryId);
    this.fetchQueryRejectFns.delete("fetchRequest:" + queryId);
    this.getQuery(queryId).subscriptions.forEach(function(x) {
      return x.unsubscribe();
    });
    this.queries.delete(queryId);
  };
  QueryManager2.prototype.getCurrentQueryResult = function(observableQuery, optimistic) {
    if (optimistic === void 0) {
      optimistic = true;
    }
    var _a3 = observableQuery.options, variables = _a3.variables, query = _a3.query, fetchPolicy = _a3.fetchPolicy, returnPartialData = _a3.returnPartialData;
    var lastResult = observableQuery.getLastResult();
    var newData = this.getQuery(observableQuery.queryId).newData;
    if (newData && newData.complete) {
      return { data: newData.result, partial: false };
    }
    if (fetchPolicy === "no-cache" || fetchPolicy === "network-only") {
      return { data: void 0, partial: false };
    }
    var _b = this.dataStore.getCache().diff({
      query,
      variables,
      previousResult: lastResult ? lastResult.data : void 0,
      returnPartialData: true,
      optimistic
    }), result2 = _b.result, complete = _b.complete;
    return {
      data: complete || returnPartialData ? result2 : void 0,
      partial: !complete
    };
  };
  QueryManager2.prototype.getQueryWithPreviousResult = function(queryIdOrObservable) {
    var observableQuery;
    if (typeof queryIdOrObservable === "string") {
      var foundObserveableQuery = this.getQuery(queryIdOrObservable).observableQuery;
      false ? invariant(foundObserveableQuery, 17) : invariant(foundObserveableQuery, "ObservableQuery with this id doesn't exist: " + queryIdOrObservable);
      observableQuery = foundObserveableQuery;
    } else {
      observableQuery = queryIdOrObservable;
    }
    var _a3 = observableQuery.options, variables = _a3.variables, query = _a3.query;
    return {
      previousResult: this.getCurrentQueryResult(observableQuery, false).data,
      variables,
      document: query
    };
  };
  QueryManager2.prototype.broadcastQueries = function() {
    var _this = this;
    this.onBroadcast();
    this.queries.forEach(function(info, id) {
      if (info.invalidated) {
        info.listeners.forEach(function(listener) {
          if (listener) {
            listener(_this.queryStore.get(id), info.newData);
          }
        });
      }
    });
  };
  QueryManager2.prototype.getLocalState = function() {
    return this.localState;
  };
  QueryManager2.prototype.getObservableFromLink = function(query, context, variables, deduplication) {
    var _this = this;
    if (deduplication === void 0) {
      deduplication = this.queryDeduplication;
    }
    var observable;
    var serverQuery = this.transform(query).serverQuery;
    if (serverQuery) {
      var _a3 = this, inFlightLinkObservables_1 = _a3.inFlightLinkObservables, link = _a3.link;
      var operation = {
        query: serverQuery,
        variables,
        operationName: getOperationName(serverQuery) || void 0,
        context: this.prepareContext(__assign(__assign({}, context), { forceFetch: !deduplication }))
      };
      context = operation.context;
      if (deduplication) {
        var byVariables_1 = inFlightLinkObservables_1.get(serverQuery) || new Map();
        inFlightLinkObservables_1.set(serverQuery, byVariables_1);
        var varJson_1 = JSON.stringify(variables);
        observable = byVariables_1.get(varJson_1);
        if (!observable) {
          byVariables_1.set(varJson_1, observable = multiplex(execute(link, operation)));
          var cleanup = function() {
            byVariables_1.delete(varJson_1);
            if (!byVariables_1.size)
              inFlightLinkObservables_1.delete(serverQuery);
            cleanupSub_1.unsubscribe();
          };
          var cleanupSub_1 = observable.subscribe({
            next: cleanup,
            error: cleanup,
            complete: cleanup
          });
        }
      } else {
        observable = multiplex(execute(link, operation));
      }
    } else {
      observable = Observable2.of({ data: {} });
      context = this.prepareContext(context);
    }
    var clientQuery = this.transform(query).clientQuery;
    if (clientQuery) {
      observable = asyncMap(observable, function(result2) {
        return _this.localState.runResolvers({
          document: clientQuery,
          remoteResult: result2,
          context,
          variables
        });
      });
    }
    return observable;
  };
  QueryManager2.prototype.fetchRequest = function(_a3) {
    var _this = this;
    var requestId = _a3.requestId, queryId = _a3.queryId, document = _a3.document, options = _a3.options, fetchMoreForQueryId = _a3.fetchMoreForQueryId;
    var variables = options.variables, _b = options.errorPolicy, errorPolicy = _b === void 0 ? "none" : _b, fetchPolicy = options.fetchPolicy;
    var resultFromStore;
    var errorsFromStore;
    return new Promise(function(resolve, reject) {
      var observable = _this.getObservableFromLink(document, options.context, variables);
      var fqrfId = "fetchRequest:" + queryId;
      _this.fetchQueryRejectFns.set(fqrfId, reject);
      var cleanup = function() {
        _this.fetchQueryRejectFns.delete(fqrfId);
        _this.setQuery(queryId, function(_a4) {
          var subscriptions = _a4.subscriptions;
          subscriptions.delete(subscription);
        });
      };
      var subscription = observable.map(function(result2) {
        if (requestId >= _this.getQuery(queryId).lastRequestId) {
          _this.markQueryResult(queryId, result2, options, fetchMoreForQueryId);
          _this.queryStore.markQueryResult(queryId, result2, fetchMoreForQueryId);
          _this.invalidate(queryId);
          _this.invalidate(fetchMoreForQueryId);
          _this.broadcastQueries();
        }
        if (errorPolicy === "none" && isNonEmptyArray(result2.errors)) {
          return reject(new ApolloError({
            graphQLErrors: result2.errors
          }));
        }
        if (errorPolicy === "all") {
          errorsFromStore = result2.errors;
        }
        if (fetchMoreForQueryId || fetchPolicy === "no-cache") {
          resultFromStore = result2.data;
        } else {
          var _a4 = _this.dataStore.getCache().diff({
            variables,
            query: document,
            optimistic: false,
            returnPartialData: true
          }), result_1 = _a4.result, complete = _a4.complete;
          if (complete || options.returnPartialData) {
            resultFromStore = result_1;
          }
        }
      }).subscribe({
        error: function(error) {
          cleanup();
          reject(error);
        },
        complete: function() {
          cleanup();
          resolve({
            data: resultFromStore,
            errors: errorsFromStore,
            loading: false,
            networkStatus: NetworkStatus.ready,
            stale: false
          });
        }
      });
      _this.setQuery(queryId, function(_a4) {
        var subscriptions = _a4.subscriptions;
        subscriptions.add(subscription);
      });
    });
  };
  QueryManager2.prototype.getQuery = function(queryId) {
    return this.queries.get(queryId) || {
      listeners: new Set(),
      invalidated: false,
      document: null,
      newData: null,
      lastRequestId: 1,
      observableQuery: null,
      subscriptions: new Set()
    };
  };
  QueryManager2.prototype.setQuery = function(queryId, updater) {
    var prev = this.getQuery(queryId);
    var newInfo = __assign(__assign({}, prev), updater(prev));
    this.queries.set(queryId, newInfo);
  };
  QueryManager2.prototype.invalidate = function(queryId, invalidated) {
    if (invalidated === void 0) {
      invalidated = true;
    }
    if (queryId) {
      this.setQuery(queryId, function() {
        return { invalidated };
      });
    }
  };
  QueryManager2.prototype.prepareContext = function(context) {
    if (context === void 0) {
      context = {};
    }
    var newContext = this.localState.prepareContext(context);
    return __assign(__assign({}, newContext), { clientAwareness: this.clientAwareness });
  };
  QueryManager2.prototype.checkInFlight = function(queryId) {
    var query = this.queryStore.get(queryId);
    return query && query.networkStatus !== NetworkStatus.ready && query.networkStatus !== NetworkStatus.error;
  };
  QueryManager2.prototype.startPollingQuery = function(options, queryId, listener) {
    var _this = this;
    var pollInterval = options.pollInterval;
    false ? invariant(pollInterval, 18) : invariant(pollInterval, "Attempted to start a polling query without a polling interval.");
    if (!this.ssrMode) {
      var info = this.pollingInfoByQueryId.get(queryId);
      if (!info) {
        this.pollingInfoByQueryId.set(queryId, info = {});
      }
      info.interval = pollInterval;
      info.options = __assign(__assign({}, options), { fetchPolicy: "network-only" });
      var maybeFetch_1 = function() {
        var info2 = _this.pollingInfoByQueryId.get(queryId);
        if (info2) {
          if (_this.checkInFlight(queryId)) {
            poll_1();
          } else {
            _this.fetchQuery(queryId, info2.options, FetchType.poll).then(poll_1, poll_1);
          }
        }
      };
      var poll_1 = function() {
        var info2 = _this.pollingInfoByQueryId.get(queryId);
        if (info2) {
          clearTimeout(info2.timeout);
          info2.timeout = setTimeout(maybeFetch_1, info2.interval);
        }
      };
      if (listener) {
        this.addQueryListener(queryId, listener);
      }
      poll_1();
    }
    return queryId;
  };
  QueryManager2.prototype.stopPollingQuery = function(queryId) {
    this.pollingInfoByQueryId.delete(queryId);
  };
  return QueryManager2;
}();
var DataStore = function() {
  function DataStore2(initialCache) {
    this.cache = initialCache;
  }
  DataStore2.prototype.getCache = function() {
    return this.cache;
  };
  DataStore2.prototype.markQueryResult = function(result2, document, variables, fetchMoreForQueryId, ignoreErrors) {
    if (ignoreErrors === void 0) {
      ignoreErrors = false;
    }
    var writeWithErrors = !graphQLResultHasError(result2);
    if (ignoreErrors && graphQLResultHasError(result2) && result2.data) {
      writeWithErrors = true;
    }
    if (!fetchMoreForQueryId && writeWithErrors) {
      this.cache.write({
        result: result2.data,
        dataId: "ROOT_QUERY",
        query: document,
        variables
      });
    }
  };
  DataStore2.prototype.markSubscriptionResult = function(result2, document, variables) {
    if (!graphQLResultHasError(result2)) {
      this.cache.write({
        result: result2.data,
        dataId: "ROOT_SUBSCRIPTION",
        query: document,
        variables
      });
    }
  };
  DataStore2.prototype.markMutationInit = function(mutation) {
    var _this = this;
    if (mutation.optimisticResponse) {
      var optimistic_1;
      if (typeof mutation.optimisticResponse === "function") {
        optimistic_1 = mutation.optimisticResponse(mutation.variables);
      } else {
        optimistic_1 = mutation.optimisticResponse;
      }
      this.cache.recordOptimisticTransaction(function(c) {
        var orig = _this.cache;
        _this.cache = c;
        try {
          _this.markMutationResult({
            mutationId: mutation.mutationId,
            result: { data: optimistic_1 },
            document: mutation.document,
            variables: mutation.variables,
            updateQueries: mutation.updateQueries,
            update: mutation.update
          });
        } finally {
          _this.cache = orig;
        }
      }, mutation.mutationId);
    }
  };
  DataStore2.prototype.markMutationResult = function(mutation) {
    var _this = this;
    if (!graphQLResultHasError(mutation.result)) {
      var cacheWrites_1 = [{
        result: mutation.result.data,
        dataId: "ROOT_MUTATION",
        query: mutation.document,
        variables: mutation.variables
      }];
      var updateQueries_1 = mutation.updateQueries;
      if (updateQueries_1) {
        Object.keys(updateQueries_1).forEach(function(id) {
          var _a3 = updateQueries_1[id], query = _a3.query, updater = _a3.updater;
          var _b = _this.cache.diff({
            query: query.document,
            variables: query.variables,
            returnPartialData: true,
            optimistic: false
          }), currentQueryResult = _b.result, complete = _b.complete;
          if (complete) {
            var nextQueryResult = tryFunctionOrLogError(function() {
              return updater(currentQueryResult, {
                mutationResult: mutation.result,
                queryName: getOperationName(query.document) || void 0,
                queryVariables: query.variables
              });
            });
            if (nextQueryResult) {
              cacheWrites_1.push({
                result: nextQueryResult,
                dataId: "ROOT_QUERY",
                query: query.document,
                variables: query.variables
              });
            }
          }
        });
      }
      this.cache.performTransaction(function(c) {
        cacheWrites_1.forEach(function(write) {
          return c.write(write);
        });
        var update = mutation.update;
        if (update) {
          tryFunctionOrLogError(function() {
            return update(c, mutation.result);
          });
        }
      });
    }
  };
  DataStore2.prototype.markMutationComplete = function(_a3) {
    var mutationId = _a3.mutationId, optimisticResponse = _a3.optimisticResponse;
    if (optimisticResponse) {
      this.cache.removeOptimistic(mutationId);
    }
  };
  DataStore2.prototype.markUpdateQueryResult = function(document, variables, newResult) {
    this.cache.write({
      result: newResult,
      dataId: "ROOT_QUERY",
      variables,
      query: document
    });
  };
  DataStore2.prototype.reset = function() {
    return this.cache.reset();
  };
  return DataStore2;
}();
var version = "2.6.10";
var hasSuggestedDevtools = false;
var ApolloClient = function() {
  function ApolloClient2(options) {
    var _this = this;
    this.defaultOptions = {};
    this.resetStoreCallbacks = [];
    this.clearStoreCallbacks = [];
    var cache = options.cache, _a3 = options.ssrMode, ssrMode = _a3 === void 0 ? false : _a3, _b = options.ssrForceFetchDelay, ssrForceFetchDelay = _b === void 0 ? 0 : _b, connectToDevTools = options.connectToDevTools, _c = options.queryDeduplication, queryDeduplication = _c === void 0 ? true : _c, defaultOptions2 = options.defaultOptions, _d = options.assumeImmutableResults, assumeImmutableResults = _d === void 0 ? false : _d, resolvers = options.resolvers, typeDefs = options.typeDefs, fragmentMatcher = options.fragmentMatcher, clientAwarenessName = options.name, clientAwarenessVersion = options.version;
    var link = options.link;
    if (!link && resolvers) {
      link = ApolloLink.empty();
    }
    if (!link || !cache) {
      throw false ? new InvariantError(4) : new InvariantError("In order to initialize Apollo Client, you must specify 'link' and 'cache' properties in the options object.\nThese options are part of the upgrade requirements when migrating from Apollo Client 1.x to Apollo Client 2.x.\nFor more information, please visit: https://www.apollographql.com/docs/tutorial/client.html#apollo-client-setup");
    }
    this.link = link;
    this.cache = cache;
    this.store = new DataStore(cache);
    this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;
    this.queryDeduplication = queryDeduplication;
    this.defaultOptions = defaultOptions2 || {};
    this.typeDefs = typeDefs;
    if (ssrForceFetchDelay) {
      setTimeout(function() {
        return _this.disableNetworkFetches = false;
      }, ssrForceFetchDelay);
    }
    this.watchQuery = this.watchQuery.bind(this);
    this.query = this.query.bind(this);
    this.mutate = this.mutate.bind(this);
    this.resetStore = this.resetStore.bind(this);
    this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);
    var defaultConnectToDevTools = typeof window !== "undefined" && !window.__APOLLO_CLIENT__;
    if (typeof connectToDevTools === "undefined" ? defaultConnectToDevTools : connectToDevTools && typeof window !== "undefined") {
      window.__APOLLO_CLIENT__ = this;
    }
    if (!hasSuggestedDevtools && true) {
      hasSuggestedDevtools = true;
      if (typeof window !== "undefined" && window.document && window.top === window.self) {
        if (typeof window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
          if (window.navigator && window.navigator.userAgent && window.navigator.userAgent.indexOf("Chrome") > -1) {
            console.debug("Download the Apollo DevTools for a better development experience: https://chrome.google.com/webstore/detail/apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm");
          }
        }
      }
    }
    this.version = version;
    this.localState = new LocalState({
      cache,
      client: this,
      resolvers,
      fragmentMatcher
    });
    this.queryManager = new QueryManager({
      link: this.link,
      store: this.store,
      queryDeduplication,
      ssrMode,
      clientAwareness: {
        name: clientAwarenessName,
        version: clientAwarenessVersion
      },
      localState: this.localState,
      assumeImmutableResults,
      onBroadcast: function() {
        if (_this.devToolsHookCb) {
          _this.devToolsHookCb({
            action: {},
            state: {
              queries: _this.queryManager.queryStore.getStore(),
              mutations: _this.queryManager.mutationStore.getStore()
            },
            dataWithOptimisticResults: _this.cache.extract(true)
          });
        }
      }
    });
  }
  ApolloClient2.prototype.stop = function() {
    this.queryManager.stop();
  };
  ApolloClient2.prototype.watchQuery = function(options) {
    if (this.defaultOptions.watchQuery) {
      options = __assign(__assign({}, this.defaultOptions.watchQuery), options);
    }
    if (this.disableNetworkFetches && (options.fetchPolicy === "network-only" || options.fetchPolicy === "cache-and-network")) {
      options = __assign(__assign({}, options), { fetchPolicy: "cache-first" });
    }
    return this.queryManager.watchQuery(options);
  };
  ApolloClient2.prototype.query = function(options) {
    if (this.defaultOptions.query) {
      options = __assign(__assign({}, this.defaultOptions.query), options);
    }
    false ? invariant(options.fetchPolicy !== "cache-and-network", 5) : invariant(options.fetchPolicy !== "cache-and-network", "The cache-and-network fetchPolicy does not work with client.query, because client.query can only return a single result. Please use client.watchQuery to receive multiple results from the cache and the network, or consider using a different fetchPolicy, such as cache-first or network-only.");
    if (this.disableNetworkFetches && options.fetchPolicy === "network-only") {
      options = __assign(__assign({}, options), { fetchPolicy: "cache-first" });
    }
    return this.queryManager.query(options);
  };
  ApolloClient2.prototype.mutate = function(options) {
    if (this.defaultOptions.mutate) {
      options = __assign(__assign({}, this.defaultOptions.mutate), options);
    }
    return this.queryManager.mutate(options);
  };
  ApolloClient2.prototype.subscribe = function(options) {
    return this.queryManager.startGraphQLSubscription(options);
  };
  ApolloClient2.prototype.readQuery = function(options, optimistic) {
    if (optimistic === void 0) {
      optimistic = false;
    }
    return this.cache.readQuery(options, optimistic);
  };
  ApolloClient2.prototype.readFragment = function(options, optimistic) {
    if (optimistic === void 0) {
      optimistic = false;
    }
    return this.cache.readFragment(options, optimistic);
  };
  ApolloClient2.prototype.writeQuery = function(options) {
    var result2 = this.cache.writeQuery(options);
    this.queryManager.broadcastQueries();
    return result2;
  };
  ApolloClient2.prototype.writeFragment = function(options) {
    var result2 = this.cache.writeFragment(options);
    this.queryManager.broadcastQueries();
    return result2;
  };
  ApolloClient2.prototype.writeData = function(options) {
    var result2 = this.cache.writeData(options);
    this.queryManager.broadcastQueries();
    return result2;
  };
  ApolloClient2.prototype.__actionHookForDevTools = function(cb) {
    this.devToolsHookCb = cb;
  };
  ApolloClient2.prototype.__requestRaw = function(payload) {
    return execute(this.link, payload);
  };
  ApolloClient2.prototype.initQueryManager = function() {
    invariant.warn("Calling the initQueryManager method is no longer necessary, and it will be removed from ApolloClient in version 3.0.");
    return this.queryManager;
  };
  ApolloClient2.prototype.resetStore = function() {
    var _this = this;
    return Promise.resolve().then(function() {
      return _this.queryManager.clearStore();
    }).then(function() {
      return Promise.all(_this.resetStoreCallbacks.map(function(fn) {
        return fn();
      }));
    }).then(function() {
      return _this.reFetchObservableQueries();
    });
  };
  ApolloClient2.prototype.clearStore = function() {
    var _this = this;
    return Promise.resolve().then(function() {
      return _this.queryManager.clearStore();
    }).then(function() {
      return Promise.all(_this.clearStoreCallbacks.map(function(fn) {
        return fn();
      }));
    });
  };
  ApolloClient2.prototype.onResetStore = function(cb) {
    var _this = this;
    this.resetStoreCallbacks.push(cb);
    return function() {
      _this.resetStoreCallbacks = _this.resetStoreCallbacks.filter(function(c) {
        return c !== cb;
      });
    };
  };
  ApolloClient2.prototype.onClearStore = function(cb) {
    var _this = this;
    this.clearStoreCallbacks.push(cb);
    return function() {
      _this.clearStoreCallbacks = _this.clearStoreCallbacks.filter(function(c) {
        return c !== cb;
      });
    };
  };
  ApolloClient2.prototype.reFetchObservableQueries = function(includeStandby) {
    return this.queryManager.reFetchObservableQueries(includeStandby);
  };
  ApolloClient2.prototype.extract = function(optimistic) {
    return this.cache.extract(optimistic);
  };
  ApolloClient2.prototype.restore = function(serializedState) {
    return this.cache.restore(serializedState);
  };
  ApolloClient2.prototype.addResolvers = function(resolvers) {
    this.localState.addResolvers(resolvers);
  };
  ApolloClient2.prototype.setResolvers = function(resolvers) {
    this.localState.setResolvers(resolvers);
  };
  ApolloClient2.prototype.getResolvers = function() {
    return this.localState.getResolvers();
  };
  ApolloClient2.prototype.setLocalStateFragmentMatcher = function(fragmentMatcher) {
    this.localState.setFragmentMatcher(fragmentMatcher);
  };
  return ApolloClient2;
}();
var bundle_esm_default2 = ApolloClient;

// node_modules/apollo-cache/lib/bundle.esm.js
function queryFromPojo(obj) {
  var op = {
    kind: "OperationDefinition",
    operation: "query",
    name: {
      kind: "Name",
      value: "GeneratedClientQuery"
    },
    selectionSet: selectionSetFromObj(obj)
  };
  var out = {
    kind: "Document",
    definitions: [op]
  };
  return out;
}
function fragmentFromPojo(obj, typename) {
  var frag = {
    kind: "FragmentDefinition",
    typeCondition: {
      kind: "NamedType",
      name: {
        kind: "Name",
        value: typename || "__FakeType"
      }
    },
    name: {
      kind: "Name",
      value: "GeneratedClientQuery"
    },
    selectionSet: selectionSetFromObj(obj)
  };
  var out = {
    kind: "Document",
    definitions: [frag]
  };
  return out;
}
function selectionSetFromObj(obj) {
  if (typeof obj === "number" || typeof obj === "boolean" || typeof obj === "string" || typeof obj === "undefined" || obj === null) {
    return null;
  }
  if (Array.isArray(obj)) {
    return selectionSetFromObj(obj[0]);
  }
  var selections = [];
  Object.keys(obj).forEach(function(key) {
    var nestedSelSet = selectionSetFromObj(obj[key]);
    var field = {
      kind: "Field",
      name: {
        kind: "Name",
        value: key
      },
      selectionSet: nestedSelSet || void 0
    };
    selections.push(field);
  });
  var selectionSet = {
    kind: "SelectionSet",
    selections
  };
  return selectionSet;
}
var justTypenameQuery = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: null,
      variableDefinitions: null,
      directives: [],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            alias: null,
            name: {
              kind: "Name",
              value: "__typename"
            },
            arguments: [],
            directives: [],
            selectionSet: null
          }
        ]
      }
    }
  ]
};
var ApolloCache = function() {
  function ApolloCache2() {
  }
  ApolloCache2.prototype.transformDocument = function(document) {
    return document;
  };
  ApolloCache2.prototype.transformForLink = function(document) {
    return document;
  };
  ApolloCache2.prototype.readQuery = function(options, optimistic) {
    if (optimistic === void 0) {
      optimistic = false;
    }
    return this.read({
      query: options.query,
      variables: options.variables,
      optimistic
    });
  };
  ApolloCache2.prototype.readFragment = function(options, optimistic) {
    if (optimistic === void 0) {
      optimistic = false;
    }
    return this.read({
      query: getFragmentQueryDocument(options.fragment, options.fragmentName),
      variables: options.variables,
      rootId: options.id,
      optimistic
    });
  };
  ApolloCache2.prototype.writeQuery = function(options) {
    this.write({
      dataId: "ROOT_QUERY",
      result: options.data,
      query: options.query,
      variables: options.variables
    });
  };
  ApolloCache2.prototype.writeFragment = function(options) {
    this.write({
      dataId: options.id,
      result: options.data,
      variables: options.variables,
      query: getFragmentQueryDocument(options.fragment, options.fragmentName)
    });
  };
  ApolloCache2.prototype.writeData = function(_a3) {
    var id = _a3.id, data = _a3.data;
    if (typeof id !== "undefined") {
      var typenameResult = null;
      try {
        typenameResult = this.read({
          rootId: id,
          optimistic: false,
          query: justTypenameQuery
        });
      } catch (e) {
      }
      var __typename = typenameResult && typenameResult.__typename || "__ClientData";
      var dataToWrite = Object.assign({ __typename }, data);
      this.writeFragment({
        id,
        fragment: fragmentFromPojo(dataToWrite, __typename),
        data: dataToWrite
      });
    } else {
      this.writeQuery({ query: queryFromPojo(data), data });
    }
  };
  return ApolloCache2;
}();
var Cache;
(function(Cache3) {
})(Cache || (Cache = {}));

// node_modules/optimism/node_modules/@wry/context/lib/context.esm.js
var currentContext = null;
var MISSING_VALUE = {};
var idCounter = 1;
var makeSlotClass = function() {
  return function() {
    function Slot2() {
      this.id = [
        "slot",
        idCounter++,
        Date.now(),
        Math.random().toString(36).slice(2)
      ].join(":");
    }
    Slot2.prototype.hasValue = function() {
      for (var context_1 = currentContext; context_1; context_1 = context_1.parent) {
        if (this.id in context_1.slots) {
          var value = context_1.slots[this.id];
          if (value === MISSING_VALUE)
            break;
          if (context_1 !== currentContext) {
            currentContext.slots[this.id] = value;
          }
          return true;
        }
      }
      if (currentContext) {
        currentContext.slots[this.id] = MISSING_VALUE;
      }
      return false;
    };
    Slot2.prototype.getValue = function() {
      if (this.hasValue()) {
        return currentContext.slots[this.id];
      }
    };
    Slot2.prototype.withValue = function(value, callback, args, thisArg) {
      var _a3;
      var slots = (_a3 = {
        __proto__: null
      }, _a3[this.id] = value, _a3);
      var parent = currentContext;
      currentContext = { parent, slots };
      try {
        return callback.apply(thisArg, args);
      } finally {
        currentContext = parent;
      }
    };
    Slot2.bind = function(callback) {
      var context = currentContext;
      return function() {
        var saved = currentContext;
        try {
          currentContext = context;
          return callback.apply(this, arguments);
        } finally {
          currentContext = saved;
        }
      };
    };
    Slot2.noContext = function(callback, args, thisArg) {
      if (currentContext) {
        var saved = currentContext;
        try {
          currentContext = null;
          return callback.apply(thisArg, args);
        } finally {
          currentContext = saved;
        }
      } else {
        return callback.apply(thisArg, args);
      }
    };
    return Slot2;
  }();
};
var globalKey = "@wry/context:Slot";
var host = Array;
var Slot = host[globalKey] || function() {
  var Slot2 = makeSlotClass();
  try {
    Object.defineProperty(host, globalKey, {
      value: host[globalKey] = Slot2,
      enumerable: false,
      writable: false,
      configurable: false
    });
  } finally {
    return Slot2;
  }
}();
var bind = Slot.bind;
var noContext = Slot.noContext;

// node_modules/optimism/lib/bundle.esm.js
function defaultDispose() {
}
var Cache2 = function() {
  function Cache3(max, dispose) {
    if (max === void 0) {
      max = Infinity;
    }
    if (dispose === void 0) {
      dispose = defaultDispose;
    }
    this.max = max;
    this.dispose = dispose;
    this.map = new Map();
    this.newest = null;
    this.oldest = null;
  }
  Cache3.prototype.has = function(key) {
    return this.map.has(key);
  };
  Cache3.prototype.get = function(key) {
    var entry = this.getEntry(key);
    return entry && entry.value;
  };
  Cache3.prototype.getEntry = function(key) {
    var entry = this.map.get(key);
    if (entry && entry !== this.newest) {
      var older = entry.older, newer = entry.newer;
      if (newer) {
        newer.older = older;
      }
      if (older) {
        older.newer = newer;
      }
      entry.older = this.newest;
      entry.older.newer = entry;
      entry.newer = null;
      this.newest = entry;
      if (entry === this.oldest) {
        this.oldest = newer;
      }
    }
    return entry;
  };
  Cache3.prototype.set = function(key, value) {
    var entry = this.getEntry(key);
    if (entry) {
      return entry.value = value;
    }
    entry = {
      key,
      value,
      newer: null,
      older: this.newest
    };
    if (this.newest) {
      this.newest.newer = entry;
    }
    this.newest = entry;
    this.oldest = this.oldest || entry;
    this.map.set(key, entry);
    return entry.value;
  };
  Cache3.prototype.clean = function() {
    while (this.oldest && this.map.size > this.max) {
      this.delete(this.oldest.key);
    }
  };
  Cache3.prototype.delete = function(key) {
    var entry = this.map.get(key);
    if (entry) {
      if (entry === this.newest) {
        this.newest = entry.older;
      }
      if (entry === this.oldest) {
        this.oldest = entry.newer;
      }
      if (entry.newer) {
        entry.newer.older = entry.older;
      }
      if (entry.older) {
        entry.older.newer = entry.newer;
      }
      this.map.delete(key);
      this.dispose(entry.value, key);
      return true;
    }
    return false;
  };
  return Cache3;
}();
var parentEntrySlot = new Slot();
var reusableEmptyArray = [];
var emptySetPool = [];
var POOL_TARGET_SIZE = 100;
function assert(condition, optionalMessage) {
  if (!condition) {
    throw new Error(optionalMessage || "assertion failure");
  }
}
function valueIs(a, b) {
  var len = a.length;
  return len > 0 && len === b.length && a[len - 1] === b[len - 1];
}
function valueGet(value) {
  switch (value.length) {
    case 0:
      throw new Error("unknown value");
    case 1:
      return value[0];
    case 2:
      throw value[1];
  }
}
function valueCopy(value) {
  return value.slice(0);
}
var Entry = function() {
  function Entry2(fn, args) {
    this.fn = fn;
    this.args = args;
    this.parents = new Set();
    this.childValues = new Map();
    this.dirtyChildren = null;
    this.dirty = true;
    this.recomputing = false;
    this.value = [];
    ++Entry2.count;
  }
  Entry2.prototype.recompute = function() {
    assert(!this.recomputing, "already recomputing");
    if (!rememberParent(this) && maybeReportOrphan(this)) {
      return void 0;
    }
    return mightBeDirty(this) ? reallyRecompute(this) : valueGet(this.value);
  };
  Entry2.prototype.setDirty = function() {
    if (this.dirty)
      return;
    this.dirty = true;
    this.value.length = 0;
    reportDirty(this);
    maybeUnsubscribe(this);
  };
  Entry2.prototype.dispose = function() {
    var _this = this;
    forgetChildren(this).forEach(maybeReportOrphan);
    maybeUnsubscribe(this);
    this.parents.forEach(function(parent) {
      parent.setDirty();
      forgetChild(parent, _this);
    });
  };
  Entry2.count = 0;
  return Entry2;
}();
function rememberParent(child) {
  var parent = parentEntrySlot.getValue();
  if (parent) {
    child.parents.add(parent);
    if (!parent.childValues.has(child)) {
      parent.childValues.set(child, []);
    }
    if (mightBeDirty(child)) {
      reportDirtyChild(parent, child);
    } else {
      reportCleanChild(parent, child);
    }
    return parent;
  }
}
function reallyRecompute(entry) {
  var originalChildren = forgetChildren(entry);
  parentEntrySlot.withValue(entry, recomputeNewValue, [entry]);
  if (maybeSubscribe(entry)) {
    setClean(entry);
  }
  originalChildren.forEach(maybeReportOrphan);
  return valueGet(entry.value);
}
function recomputeNewValue(entry) {
  entry.recomputing = true;
  entry.value.length = 0;
  try {
    entry.value[0] = entry.fn.apply(null, entry.args);
  } catch (e) {
    entry.value[1] = e;
  }
  entry.recomputing = false;
}
function mightBeDirty(entry) {
  return entry.dirty || !!(entry.dirtyChildren && entry.dirtyChildren.size);
}
function setClean(entry) {
  entry.dirty = false;
  if (mightBeDirty(entry)) {
    return;
  }
  reportClean(entry);
}
function reportDirty(child) {
  child.parents.forEach(function(parent) {
    return reportDirtyChild(parent, child);
  });
}
function reportClean(child) {
  child.parents.forEach(function(parent) {
    return reportCleanChild(parent, child);
  });
}
function reportDirtyChild(parent, child) {
  assert(parent.childValues.has(child));
  assert(mightBeDirty(child));
  if (!parent.dirtyChildren) {
    parent.dirtyChildren = emptySetPool.pop() || new Set();
  } else if (parent.dirtyChildren.has(child)) {
    return;
  }
  parent.dirtyChildren.add(child);
  reportDirty(parent);
}
function reportCleanChild(parent, child) {
  assert(parent.childValues.has(child));
  assert(!mightBeDirty(child));
  var childValue = parent.childValues.get(child);
  if (childValue.length === 0) {
    parent.childValues.set(child, valueCopy(child.value));
  } else if (!valueIs(childValue, child.value)) {
    parent.setDirty();
  }
  removeDirtyChild(parent, child);
  if (mightBeDirty(parent)) {
    return;
  }
  reportClean(parent);
}
function removeDirtyChild(parent, child) {
  var dc = parent.dirtyChildren;
  if (dc) {
    dc.delete(child);
    if (dc.size === 0) {
      if (emptySetPool.length < POOL_TARGET_SIZE) {
        emptySetPool.push(dc);
      }
      parent.dirtyChildren = null;
    }
  }
}
function maybeReportOrphan(entry) {
  return entry.parents.size === 0 && typeof entry.reportOrphan === "function" && entry.reportOrphan() === true;
}
function forgetChildren(parent) {
  var children = reusableEmptyArray;
  if (parent.childValues.size > 0) {
    children = [];
    parent.childValues.forEach(function(_value, child) {
      forgetChild(parent, child);
      children.push(child);
    });
  }
  assert(parent.dirtyChildren === null);
  return children;
}
function forgetChild(parent, child) {
  child.parents.delete(parent);
  parent.childValues.delete(child);
  removeDirtyChild(parent, child);
}
function maybeSubscribe(entry) {
  if (typeof entry.subscribe === "function") {
    try {
      maybeUnsubscribe(entry);
      entry.unsubscribe = entry.subscribe.apply(null, entry.args);
    } catch (e) {
      entry.setDirty();
      return false;
    }
  }
  return true;
}
function maybeUnsubscribe(entry) {
  var unsubscribe = entry.unsubscribe;
  if (typeof unsubscribe === "function") {
    entry.unsubscribe = void 0;
    unsubscribe();
  }
}
var KeyTrie = function() {
  function KeyTrie2(weakness) {
    this.weakness = weakness;
  }
  KeyTrie2.prototype.lookup = function() {
    var array = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      array[_i] = arguments[_i];
    }
    return this.lookupArray(array);
  };
  KeyTrie2.prototype.lookupArray = function(array) {
    var node = this;
    array.forEach(function(key) {
      return node = node.getChildTrie(key);
    });
    return node.data || (node.data = Object.create(null));
  };
  KeyTrie2.prototype.getChildTrie = function(key) {
    var map = this.weakness && isObjRef(key) ? this.weak || (this.weak = new WeakMap()) : this.strong || (this.strong = new Map());
    var child = map.get(key);
    if (!child)
      map.set(key, child = new KeyTrie2(this.weakness));
    return child;
  };
  return KeyTrie2;
}();
function isObjRef(value) {
  switch (typeof value) {
    case "object":
      if (value === null)
        break;
    case "function":
      return true;
  }
  return false;
}
var keyTrie = new KeyTrie(typeof WeakMap === "function");
function defaultMakeCacheKey() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  return keyTrie.lookupArray(args);
}
var caches = new Set();
function wrap(originalFunction, options) {
  if (options === void 0) {
    options = Object.create(null);
  }
  var cache = new Cache2(options.max || Math.pow(2, 16), function(entry) {
    return entry.dispose();
  });
  var disposable = !!options.disposable;
  var makeCacheKey = options.makeCacheKey || defaultMakeCacheKey;
  function optimistic() {
    if (disposable && !parentEntrySlot.hasValue()) {
      return void 0;
    }
    var key = makeCacheKey.apply(null, arguments);
    if (key === void 0) {
      return originalFunction.apply(null, arguments);
    }
    var args = Array.prototype.slice.call(arguments);
    var entry = cache.get(key);
    if (entry) {
      entry.args = args;
    } else {
      entry = new Entry(originalFunction, args);
      cache.set(key, entry);
      entry.subscribe = options.subscribe;
      if (disposable) {
        entry.reportOrphan = function() {
          return cache.delete(key);
        };
      }
    }
    var value = entry.recompute();
    cache.set(key, entry);
    caches.add(cache);
    if (!parentEntrySlot.hasValue()) {
      caches.forEach(function(cache2) {
        return cache2.clean();
      });
      caches.clear();
    }
    return disposable ? void 0 : value;
  }
  optimistic.dirty = function() {
    var key = makeCacheKey.apply(null, arguments);
    var child = key !== void 0 && cache.get(key);
    if (child) {
      child.setDirty();
    }
  };
  return optimistic;
}

// node_modules/apollo-cache-inmemory/lib/bundle.esm.js
var haveWarned2 = false;
function shouldWarn() {
  var answer = !haveWarned2;
  if (!isTest()) {
    haveWarned2 = true;
  }
  return answer;
}
var HeuristicFragmentMatcher = function() {
  function HeuristicFragmentMatcher2() {
  }
  HeuristicFragmentMatcher2.prototype.ensureReady = function() {
    return Promise.resolve();
  };
  HeuristicFragmentMatcher2.prototype.canBypassInit = function() {
    return true;
  };
  HeuristicFragmentMatcher2.prototype.match = function(idValue, typeCondition, context) {
    var obj = context.store.get(idValue.id);
    var isRootQuery = idValue.id === "ROOT_QUERY";
    if (!obj) {
      return isRootQuery;
    }
    var _a3 = obj.__typename, __typename = _a3 === void 0 ? isRootQuery && "Query" : _a3;
    if (!__typename) {
      if (shouldWarn()) {
        invariant.warn("You're using fragments in your queries, but either don't have the addTypename:\n  true option set in Apollo Client, or you are trying to write a fragment to the store without the __typename.\n   Please turn on the addTypename option and include __typename when writing fragments so that Apollo Client\n   can accurately match fragments.");
        invariant.warn("Could not find __typename on Fragment ", typeCondition, obj);
        invariant.warn("DEPRECATION WARNING: using fragments without __typename is unsupported behavior and will be removed in future versions of Apollo client. You should fix this and set addTypename to true now.");
      }
      return "heuristic";
    }
    if (__typename === typeCondition) {
      return true;
    }
    if (shouldWarn()) {
      invariant.error("You are using the simple (heuristic) fragment matcher, but your queries contain union or interface types. Apollo Client will not be able to accurately map fragments. To make this error go away, use the `IntrospectionFragmentMatcher` as described in the docs: https://www.apollographql.com/docs/react/advanced/fragments.html#fragment-matcher");
    }
    return "heuristic";
  };
  return HeuristicFragmentMatcher2;
}();
var IntrospectionFragmentMatcher = function() {
  function IntrospectionFragmentMatcher2(options) {
    if (options && options.introspectionQueryResultData) {
      this.possibleTypesMap = this.parseIntrospectionResult(options.introspectionQueryResultData);
      this.isReady = true;
    } else {
      this.isReady = false;
    }
    this.match = this.match.bind(this);
  }
  IntrospectionFragmentMatcher2.prototype.match = function(idValue, typeCondition, context) {
    false ? invariant(this.isReady, 1) : invariant(this.isReady, "FragmentMatcher.match() was called before FragmentMatcher.init()");
    var obj = context.store.get(idValue.id);
    var isRootQuery = idValue.id === "ROOT_QUERY";
    if (!obj) {
      return isRootQuery;
    }
    var _a3 = obj.__typename, __typename = _a3 === void 0 ? isRootQuery && "Query" : _a3;
    false ? invariant(__typename, 2) : invariant(__typename, "Cannot match fragment because __typename property is missing: " + JSON.stringify(obj));
    if (__typename === typeCondition) {
      return true;
    }
    var implementingTypes = this.possibleTypesMap[typeCondition];
    if (__typename && implementingTypes && implementingTypes.indexOf(__typename) > -1) {
      return true;
    }
    return false;
  };
  IntrospectionFragmentMatcher2.prototype.parseIntrospectionResult = function(introspectionResultData) {
    var typeMap = {};
    introspectionResultData.__schema.types.forEach(function(type) {
      if (type.kind === "UNION" || type.kind === "INTERFACE") {
        typeMap[type.name] = type.possibleTypes.map(function(implementingType) {
          return implementingType.name;
        });
      }
    });
    return typeMap;
  };
  return IntrospectionFragmentMatcher2;
}();
var hasOwn = Object.prototype.hasOwnProperty;
var DepTrackingCache = function() {
  function DepTrackingCache2(data) {
    var _this = this;
    if (data === void 0) {
      data = Object.create(null);
    }
    this.data = data;
    this.depend = wrap(function(dataId) {
      return _this.data[dataId];
    }, {
      disposable: true,
      makeCacheKey: function(dataId) {
        return dataId;
      }
    });
  }
  DepTrackingCache2.prototype.toObject = function() {
    return this.data;
  };
  DepTrackingCache2.prototype.get = function(dataId) {
    this.depend(dataId);
    return this.data[dataId];
  };
  DepTrackingCache2.prototype.set = function(dataId, value) {
    var oldValue = this.data[dataId];
    if (value !== oldValue) {
      this.data[dataId] = value;
      this.depend.dirty(dataId);
    }
  };
  DepTrackingCache2.prototype.delete = function(dataId) {
    if (hasOwn.call(this.data, dataId)) {
      delete this.data[dataId];
      this.depend.dirty(dataId);
    }
  };
  DepTrackingCache2.prototype.clear = function() {
    this.replace(null);
  };
  DepTrackingCache2.prototype.replace = function(newData) {
    var _this = this;
    if (newData) {
      Object.keys(newData).forEach(function(dataId) {
        _this.set(dataId, newData[dataId]);
      });
      Object.keys(this.data).forEach(function(dataId) {
        if (!hasOwn.call(newData, dataId)) {
          _this.delete(dataId);
        }
      });
    } else {
      Object.keys(this.data).forEach(function(dataId) {
        _this.delete(dataId);
      });
    }
  };
  return DepTrackingCache2;
}();
function defaultNormalizedCacheFactory(seed) {
  return new DepTrackingCache(seed);
}
var StoreReader = function() {
  function StoreReader2(_a3) {
    var _this = this;
    var _b = _a3 === void 0 ? {} : _a3, _c = _b.cacheKeyRoot, cacheKeyRoot = _c === void 0 ? new KeyTrie(canUseWeakMap) : _c, _d = _b.freezeResults, freezeResults = _d === void 0 ? false : _d;
    var _e = this, executeStoreQuery = _e.executeStoreQuery, executeSelectionSet = _e.executeSelectionSet, executeSubSelectedArray = _e.executeSubSelectedArray;
    this.freezeResults = freezeResults;
    this.executeStoreQuery = wrap(function(options) {
      return executeStoreQuery.call(_this, options);
    }, {
      makeCacheKey: function(_a4) {
        var query = _a4.query, rootValue = _a4.rootValue, contextValue = _a4.contextValue, variableValues = _a4.variableValues, fragmentMatcher = _a4.fragmentMatcher;
        if (contextValue.store instanceof DepTrackingCache) {
          return cacheKeyRoot.lookup(contextValue.store, query, fragmentMatcher, JSON.stringify(variableValues), rootValue.id);
        }
      }
    });
    this.executeSelectionSet = wrap(function(options) {
      return executeSelectionSet.call(_this, options);
    }, {
      makeCacheKey: function(_a4) {
        var selectionSet = _a4.selectionSet, rootValue = _a4.rootValue, execContext = _a4.execContext;
        if (execContext.contextValue.store instanceof DepTrackingCache) {
          return cacheKeyRoot.lookup(execContext.contextValue.store, selectionSet, execContext.fragmentMatcher, JSON.stringify(execContext.variableValues), rootValue.id);
        }
      }
    });
    this.executeSubSelectedArray = wrap(function(options) {
      return executeSubSelectedArray.call(_this, options);
    }, {
      makeCacheKey: function(_a4) {
        var field = _a4.field, array = _a4.array, execContext = _a4.execContext;
        if (execContext.contextValue.store instanceof DepTrackingCache) {
          return cacheKeyRoot.lookup(execContext.contextValue.store, field, array, JSON.stringify(execContext.variableValues));
        }
      }
    });
  }
  StoreReader2.prototype.readQueryFromStore = function(options) {
    return this.diffQueryAgainstStore(__assign(__assign({}, options), { returnPartialData: false })).result;
  };
  StoreReader2.prototype.diffQueryAgainstStore = function(_a3) {
    var store = _a3.store, query = _a3.query, variables = _a3.variables, previousResult = _a3.previousResult, _b = _a3.returnPartialData, returnPartialData = _b === void 0 ? true : _b, _c = _a3.rootId, rootId = _c === void 0 ? "ROOT_QUERY" : _c, fragmentMatcherFunction = _a3.fragmentMatcherFunction, config = _a3.config;
    var queryDefinition = getQueryDefinition(query);
    variables = assign({}, getDefaultValues(queryDefinition), variables);
    var context = {
      store,
      dataIdFromObject: config && config.dataIdFromObject,
      cacheRedirects: config && config.cacheRedirects || {}
    };
    var execResult = this.executeStoreQuery({
      query,
      rootValue: {
        type: "id",
        id: rootId,
        generated: true,
        typename: "Query"
      },
      contextValue: context,
      variableValues: variables,
      fragmentMatcher: fragmentMatcherFunction
    });
    var hasMissingFields = execResult.missing && execResult.missing.length > 0;
    if (hasMissingFields && !returnPartialData) {
      execResult.missing.forEach(function(info) {
        if (info.tolerable)
          return;
        throw false ? new InvariantError(8) : new InvariantError("Can't find field " + info.fieldName + " on object " + JSON.stringify(info.object, null, 2) + ".");
      });
    }
    if (previousResult) {
      if (equal(previousResult, execResult.result)) {
        execResult.result = previousResult;
      }
    }
    return {
      result: execResult.result,
      complete: !hasMissingFields
    };
  };
  StoreReader2.prototype.executeStoreQuery = function(_a3) {
    var query = _a3.query, rootValue = _a3.rootValue, contextValue = _a3.contextValue, variableValues = _a3.variableValues, _b = _a3.fragmentMatcher, fragmentMatcher = _b === void 0 ? defaultFragmentMatcher : _b;
    var mainDefinition = getMainDefinition(query);
    var fragments = getFragmentDefinitions(query);
    var fragmentMap = createFragmentMap(fragments);
    var execContext = {
      query,
      fragmentMap,
      contextValue,
      variableValues,
      fragmentMatcher
    };
    return this.executeSelectionSet({
      selectionSet: mainDefinition.selectionSet,
      rootValue,
      execContext
    });
  };
  StoreReader2.prototype.executeSelectionSet = function(_a3) {
    var _this = this;
    var selectionSet = _a3.selectionSet, rootValue = _a3.rootValue, execContext = _a3.execContext;
    var fragmentMap = execContext.fragmentMap, contextValue = execContext.contextValue, variables = execContext.variableValues;
    var finalResult = { result: null };
    var objectsToMerge = [];
    var object = contextValue.store.get(rootValue.id);
    var typename = object && object.__typename || rootValue.id === "ROOT_QUERY" && "Query" || void 0;
    function handleMissing(result2) {
      var _a4;
      if (result2.missing) {
        finalResult.missing = finalResult.missing || [];
        (_a4 = finalResult.missing).push.apply(_a4, result2.missing);
      }
      return result2.result;
    }
    selectionSet.selections.forEach(function(selection) {
      var _a4;
      if (!shouldInclude(selection, variables)) {
        return;
      }
      if (isField(selection)) {
        var fieldResult = handleMissing(_this.executeField(object, typename, selection, execContext));
        if (typeof fieldResult !== "undefined") {
          objectsToMerge.push((_a4 = {}, _a4[resultKeyNameFromField(selection)] = fieldResult, _a4));
        }
      } else {
        var fragment = void 0;
        if (isInlineFragment(selection)) {
          fragment = selection;
        } else {
          fragment = fragmentMap[selection.name.value];
          if (!fragment) {
            throw false ? new InvariantError(9) : new InvariantError("No fragment named " + selection.name.value);
          }
        }
        var typeCondition = fragment.typeCondition && fragment.typeCondition.name.value;
        var match = !typeCondition || execContext.fragmentMatcher(rootValue, typeCondition, contextValue);
        if (match) {
          var fragmentExecResult = _this.executeSelectionSet({
            selectionSet: fragment.selectionSet,
            rootValue,
            execContext
          });
          if (match === "heuristic" && fragmentExecResult.missing) {
            fragmentExecResult = __assign(__assign({}, fragmentExecResult), { missing: fragmentExecResult.missing.map(function(info) {
              return __assign(__assign({}, info), { tolerable: true });
            }) });
          }
          objectsToMerge.push(handleMissing(fragmentExecResult));
        }
      }
    });
    finalResult.result = mergeDeepArray(objectsToMerge);
    if (this.freezeResults && true) {
      Object.freeze(finalResult.result);
    }
    return finalResult;
  };
  StoreReader2.prototype.executeField = function(object, typename, field, execContext) {
    var variables = execContext.variableValues, contextValue = execContext.contextValue;
    var fieldName = field.name.value;
    var args = argumentsObjectFromField(field, variables);
    var info = {
      resultKey: resultKeyNameFromField(field),
      directives: getDirectiveInfoFromField(field, variables)
    };
    var readStoreResult = readStoreResolver(object, typename, fieldName, args, contextValue, info);
    if (Array.isArray(readStoreResult.result)) {
      return this.combineExecResults(readStoreResult, this.executeSubSelectedArray({
        field,
        array: readStoreResult.result,
        execContext
      }));
    }
    if (!field.selectionSet) {
      assertSelectionSetForIdValue(field, readStoreResult.result);
      if (this.freezeResults && true) {
        maybeDeepFreeze(readStoreResult);
      }
      return readStoreResult;
    }
    if (readStoreResult.result == null) {
      return readStoreResult;
    }
    return this.combineExecResults(readStoreResult, this.executeSelectionSet({
      selectionSet: field.selectionSet,
      rootValue: readStoreResult.result,
      execContext
    }));
  };
  StoreReader2.prototype.combineExecResults = function() {
    var execResults = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      execResults[_i] = arguments[_i];
    }
    var missing;
    execResults.forEach(function(execResult) {
      if (execResult.missing) {
        missing = missing || [];
        missing.push.apply(missing, execResult.missing);
      }
    });
    return {
      result: execResults.pop().result,
      missing
    };
  };
  StoreReader2.prototype.executeSubSelectedArray = function(_a3) {
    var _this = this;
    var field = _a3.field, array = _a3.array, execContext = _a3.execContext;
    var missing;
    function handleMissing(childResult) {
      if (childResult.missing) {
        missing = missing || [];
        missing.push.apply(missing, childResult.missing);
      }
      return childResult.result;
    }
    array = array.map(function(item) {
      if (item === null) {
        return null;
      }
      if (Array.isArray(item)) {
        return handleMissing(_this.executeSubSelectedArray({
          field,
          array: item,
          execContext
        }));
      }
      if (field.selectionSet) {
        return handleMissing(_this.executeSelectionSet({
          selectionSet: field.selectionSet,
          rootValue: item,
          execContext
        }));
      }
      assertSelectionSetForIdValue(field, item);
      return item;
    });
    if (this.freezeResults && true) {
      Object.freeze(array);
    }
    return { result: array, missing };
  };
  return StoreReader2;
}();
function assertSelectionSetForIdValue(field, value) {
  if (!field.selectionSet && isIdValue(value)) {
    throw false ? new InvariantError(10) : new InvariantError("Missing selection set for object of type " + value.typename + " returned for query field " + field.name.value);
  }
}
function defaultFragmentMatcher() {
  return true;
}
function assertIdValue(idValue) {
  false ? invariant(isIdValue(idValue), 11) : invariant(isIdValue(idValue), "Encountered a sub-selection on the query, but the store doesn't have an object reference. This should never happen during normal use unless you have custom code that is directly manipulating the store; please file an issue.");
}
function readStoreResolver(object, typename, fieldName, args, context, _a3) {
  var resultKey = _a3.resultKey, directives = _a3.directives;
  var storeKeyName = fieldName;
  if (args || directives) {
    storeKeyName = getStoreKeyName(storeKeyName, args, directives);
  }
  var fieldValue = void 0;
  if (object) {
    fieldValue = object[storeKeyName];
    if (typeof fieldValue === "undefined" && context.cacheRedirects && typeof typename === "string") {
      var type = context.cacheRedirects[typename];
      if (type) {
        var resolver = type[fieldName];
        if (resolver) {
          fieldValue = resolver(object, args, {
            getCacheKey: function(storeObj) {
              var id = context.dataIdFromObject(storeObj);
              return id && toIdValue({
                id,
                typename: storeObj.__typename
              });
            }
          });
        }
      }
    }
  }
  if (typeof fieldValue === "undefined") {
    return {
      result: fieldValue,
      missing: [{
        object,
        fieldName: storeKeyName,
        tolerable: false
      }]
    };
  }
  if (isJsonValue(fieldValue)) {
    fieldValue = fieldValue.json;
  }
  return {
    result: fieldValue
  };
}
var ObjectCache = function() {
  function ObjectCache2(data) {
    if (data === void 0) {
      data = Object.create(null);
    }
    this.data = data;
  }
  ObjectCache2.prototype.toObject = function() {
    return this.data;
  };
  ObjectCache2.prototype.get = function(dataId) {
    return this.data[dataId];
  };
  ObjectCache2.prototype.set = function(dataId, value) {
    this.data[dataId] = value;
  };
  ObjectCache2.prototype.delete = function(dataId) {
    this.data[dataId] = void 0;
  };
  ObjectCache2.prototype.clear = function() {
    this.data = Object.create(null);
  };
  ObjectCache2.prototype.replace = function(newData) {
    this.data = newData || Object.create(null);
  };
  return ObjectCache2;
}();
function defaultNormalizedCacheFactory$1(seed) {
  return new ObjectCache(seed);
}
var WriteError = function(_super) {
  __extends(WriteError2, _super);
  function WriteError2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.type = "WriteError";
    return _this;
  }
  return WriteError2;
}(Error);
function enhanceErrorWithDocument(error, document) {
  var enhancedError = new WriteError("Error writing result to store for query:\n " + JSON.stringify(document));
  enhancedError.message += "\n" + error.message;
  enhancedError.stack = error.stack;
  return enhancedError;
}
var StoreWriter = function() {
  function StoreWriter2() {
  }
  StoreWriter2.prototype.writeQueryToStore = function(_a3) {
    var query = _a3.query, result2 = _a3.result, _b = _a3.store, store = _b === void 0 ? defaultNormalizedCacheFactory() : _b, variables = _a3.variables, dataIdFromObject = _a3.dataIdFromObject, fragmentMatcherFunction = _a3.fragmentMatcherFunction;
    return this.writeResultToStore({
      dataId: "ROOT_QUERY",
      result: result2,
      document: query,
      store,
      variables,
      dataIdFromObject,
      fragmentMatcherFunction
    });
  };
  StoreWriter2.prototype.writeResultToStore = function(_a3) {
    var dataId = _a3.dataId, result2 = _a3.result, document = _a3.document, _b = _a3.store, store = _b === void 0 ? defaultNormalizedCacheFactory() : _b, variables = _a3.variables, dataIdFromObject = _a3.dataIdFromObject, fragmentMatcherFunction = _a3.fragmentMatcherFunction;
    var operationDefinition = getOperationDefinition(document);
    try {
      return this.writeSelectionSetToStore({
        result: result2,
        dataId,
        selectionSet: operationDefinition.selectionSet,
        context: {
          store,
          processedData: {},
          variables: assign({}, getDefaultValues(operationDefinition), variables),
          dataIdFromObject,
          fragmentMap: createFragmentMap(getFragmentDefinitions(document)),
          fragmentMatcherFunction
        }
      });
    } catch (e) {
      throw enhanceErrorWithDocument(e, document);
    }
  };
  StoreWriter2.prototype.writeSelectionSetToStore = function(_a3) {
    var _this = this;
    var result2 = _a3.result, dataId = _a3.dataId, selectionSet = _a3.selectionSet, context = _a3.context;
    var variables = context.variables, store = context.store, fragmentMap = context.fragmentMap;
    selectionSet.selections.forEach(function(selection) {
      var _a4;
      if (!shouldInclude(selection, variables)) {
        return;
      }
      if (isField(selection)) {
        var resultFieldKey = resultKeyNameFromField(selection);
        var value = result2[resultFieldKey];
        if (typeof value !== "undefined") {
          _this.writeFieldToStore({
            dataId,
            value,
            field: selection,
            context
          });
        } else {
          var isDefered = false;
          var isClient = false;
          if (selection.directives && selection.directives.length) {
            isDefered = selection.directives.some(function(directive) {
              return directive.name && directive.name.value === "defer";
            });
            isClient = selection.directives.some(function(directive) {
              return directive.name && directive.name.value === "client";
            });
          }
          if (!isDefered && !isClient && context.fragmentMatcherFunction) {
            invariant.warn("Missing field " + resultFieldKey + " in " + JSON.stringify(result2, null, 2).substring(0, 100));
          }
        }
      } else {
        var fragment = void 0;
        if (isInlineFragment(selection)) {
          fragment = selection;
        } else {
          fragment = (fragmentMap || {})[selection.name.value];
          false ? invariant(fragment, 3) : invariant(fragment, "No fragment named " + selection.name.value + ".");
        }
        var matches = true;
        if (context.fragmentMatcherFunction && fragment.typeCondition) {
          var id = dataId || "self";
          var idValue = toIdValue({ id, typename: void 0 });
          var fakeContext = {
            store: new ObjectCache((_a4 = {}, _a4[id] = result2, _a4)),
            cacheRedirects: {}
          };
          var match = context.fragmentMatcherFunction(idValue, fragment.typeCondition.name.value, fakeContext);
          if (!isProduction() && match === "heuristic") {
            invariant.error("WARNING: heuristic fragment matching going on!");
          }
          matches = !!match;
        }
        if (matches) {
          _this.writeSelectionSetToStore({
            result: result2,
            selectionSet: fragment.selectionSet,
            dataId,
            context
          });
        }
      }
    });
    return store;
  };
  StoreWriter2.prototype.writeFieldToStore = function(_a3) {
    var _b;
    var field = _a3.field, value = _a3.value, dataId = _a3.dataId, context = _a3.context;
    var variables = context.variables, dataIdFromObject = context.dataIdFromObject, store = context.store;
    var storeValue;
    var storeObject;
    var storeFieldName = storeKeyNameFromField(field, variables);
    if (!field.selectionSet || value === null) {
      storeValue = value != null && typeof value === "object" ? { type: "json", json: value } : value;
    } else if (Array.isArray(value)) {
      var generatedId = dataId + "." + storeFieldName;
      storeValue = this.processArrayValue(value, generatedId, field.selectionSet, context);
    } else {
      var valueDataId = dataId + "." + storeFieldName;
      var generated = true;
      if (!isGeneratedId(valueDataId)) {
        valueDataId = "$" + valueDataId;
      }
      if (dataIdFromObject) {
        var semanticId = dataIdFromObject(value);
        false ? invariant(!semanticId || !isGeneratedId(semanticId), 4) : invariant(!semanticId || !isGeneratedId(semanticId), 'IDs returned by dataIdFromObject cannot begin with the "$" character.');
        if (semanticId || typeof semanticId === "number" && semanticId === 0) {
          valueDataId = semanticId;
          generated = false;
        }
      }
      if (!isDataProcessed(valueDataId, field, context.processedData)) {
        this.writeSelectionSetToStore({
          dataId: valueDataId,
          result: value,
          selectionSet: field.selectionSet,
          context
        });
      }
      var typename = value.__typename;
      storeValue = toIdValue({ id: valueDataId, typename }, generated);
      storeObject = store.get(dataId);
      var escapedId = storeObject && storeObject[storeFieldName];
      if (escapedId !== storeValue && isIdValue(escapedId)) {
        var hadTypename = escapedId.typename !== void 0;
        var hasTypename = typename !== void 0;
        var typenameChanged = hadTypename && hasTypename && escapedId.typename !== typename;
        false ? invariant(!generated || escapedId.generated || typenameChanged, 5) : invariant(!generated || escapedId.generated || typenameChanged, "Store error: the application attempted to write an object with no provided id but the store already contains an id of " + escapedId.id + " for this object. The selectionSet that was trying to be written is:\n" + JSON.stringify(field));
        false ? invariant(!hadTypename || hasTypename, 6) : invariant(!hadTypename || hasTypename, "Store error: the application attempted to write an object with no provided typename but the store already contains an object with typename of " + escapedId.typename + " for the object of id " + escapedId.id + ". The selectionSet that was trying to be written is:\n" + JSON.stringify(field));
        if (escapedId.generated) {
          if (typenameChanged) {
            if (!generated) {
              store.delete(escapedId.id);
            }
          } else {
            mergeWithGenerated(escapedId.id, storeValue.id, store);
          }
        }
      }
    }
    storeObject = store.get(dataId);
    if (!storeObject || !equal(storeValue, storeObject[storeFieldName])) {
      store.set(dataId, __assign(__assign({}, storeObject), (_b = {}, _b[storeFieldName] = storeValue, _b)));
    }
  };
  StoreWriter2.prototype.processArrayValue = function(value, generatedId, selectionSet, context) {
    var _this = this;
    return value.map(function(item, index) {
      if (item === null) {
        return null;
      }
      var itemDataId = generatedId + "." + index;
      if (Array.isArray(item)) {
        return _this.processArrayValue(item, itemDataId, selectionSet, context);
      }
      var generated = true;
      if (context.dataIdFromObject) {
        var semanticId = context.dataIdFromObject(item);
        if (semanticId) {
          itemDataId = semanticId;
          generated = false;
        }
      }
      if (!isDataProcessed(itemDataId, selectionSet, context.processedData)) {
        _this.writeSelectionSetToStore({
          dataId: itemDataId,
          result: item,
          selectionSet,
          context
        });
      }
      return toIdValue({ id: itemDataId, typename: item.__typename }, generated);
    });
  };
  return StoreWriter2;
}();
function isGeneratedId(id) {
  return id[0] === "$";
}
function mergeWithGenerated(generatedKey, realKey, cache) {
  if (generatedKey === realKey) {
    return false;
  }
  var generated = cache.get(generatedKey);
  var real = cache.get(realKey);
  var madeChanges = false;
  Object.keys(generated).forEach(function(key) {
    var value = generated[key];
    var realValue = real[key];
    if (isIdValue(value) && isGeneratedId(value.id) && isIdValue(realValue) && !equal(value, realValue) && mergeWithGenerated(value.id, realValue.id, cache)) {
      madeChanges = true;
    }
  });
  cache.delete(generatedKey);
  var newRealValue = __assign(__assign({}, generated), real);
  if (equal(newRealValue, real)) {
    return madeChanges;
  }
  cache.set(realKey, newRealValue);
  return true;
}
function isDataProcessed(dataId, field, processedData) {
  if (!processedData) {
    return false;
  }
  if (processedData[dataId]) {
    if (processedData[dataId].indexOf(field) >= 0) {
      return true;
    } else {
      processedData[dataId].push(field);
    }
  } else {
    processedData[dataId] = [field];
  }
  return false;
}
var defaultConfig = {
  fragmentMatcher: new HeuristicFragmentMatcher(),
  dataIdFromObject: defaultDataIdFromObject,
  addTypename: true,
  resultCaching: true,
  freezeResults: false
};
function defaultDataIdFromObject(result2) {
  if (result2.__typename) {
    if (result2.id !== void 0) {
      return result2.__typename + ":" + result2.id;
    }
    if (result2._id !== void 0) {
      return result2.__typename + ":" + result2._id;
    }
  }
  return null;
}
var hasOwn$1 = Object.prototype.hasOwnProperty;
var OptimisticCacheLayer = function(_super) {
  __extends(OptimisticCacheLayer2, _super);
  function OptimisticCacheLayer2(optimisticId, parent, transaction) {
    var _this = _super.call(this, Object.create(null)) || this;
    _this.optimisticId = optimisticId;
    _this.parent = parent;
    _this.transaction = transaction;
    return _this;
  }
  OptimisticCacheLayer2.prototype.toObject = function() {
    return __assign(__assign({}, this.parent.toObject()), this.data);
  };
  OptimisticCacheLayer2.prototype.get = function(dataId) {
    return hasOwn$1.call(this.data, dataId) ? this.data[dataId] : this.parent.get(dataId);
  };
  return OptimisticCacheLayer2;
}(ObjectCache);
var InMemoryCache = function(_super) {
  __extends(InMemoryCache2, _super);
  function InMemoryCache2(config) {
    if (config === void 0) {
      config = {};
    }
    var _this = _super.call(this) || this;
    _this.watches = new Set();
    _this.typenameDocumentCache = new Map();
    _this.cacheKeyRoot = new KeyTrie(canUseWeakMap);
    _this.silenceBroadcast = false;
    _this.config = __assign(__assign({}, defaultConfig), config);
    if (_this.config.customResolvers) {
      invariant.warn("customResolvers have been renamed to cacheRedirects. Please update your config as we will be deprecating customResolvers in the next major version.");
      _this.config.cacheRedirects = _this.config.customResolvers;
    }
    if (_this.config.cacheResolvers) {
      invariant.warn("cacheResolvers have been renamed to cacheRedirects. Please update your config as we will be deprecating cacheResolvers in the next major version.");
      _this.config.cacheRedirects = _this.config.cacheResolvers;
    }
    _this.addTypename = !!_this.config.addTypename;
    _this.data = _this.config.resultCaching ? new DepTrackingCache() : new ObjectCache();
    _this.optimisticData = _this.data;
    _this.storeWriter = new StoreWriter();
    _this.storeReader = new StoreReader({
      cacheKeyRoot: _this.cacheKeyRoot,
      freezeResults: config.freezeResults
    });
    var cache = _this;
    var maybeBroadcastWatch = cache.maybeBroadcastWatch;
    _this.maybeBroadcastWatch = wrap(function(c) {
      return maybeBroadcastWatch.call(_this, c);
    }, {
      makeCacheKey: function(c) {
        if (c.optimistic) {
          return;
        }
        if (c.previousResult) {
          return;
        }
        if (cache.data instanceof DepTrackingCache) {
          return cache.cacheKeyRoot.lookup(c.query, JSON.stringify(c.variables));
        }
      }
    });
    return _this;
  }
  InMemoryCache2.prototype.restore = function(data) {
    if (data)
      this.data.replace(data);
    return this;
  };
  InMemoryCache2.prototype.extract = function(optimistic) {
    if (optimistic === void 0) {
      optimistic = false;
    }
    return (optimistic ? this.optimisticData : this.data).toObject();
  };
  InMemoryCache2.prototype.read = function(options) {
    if (typeof options.rootId === "string" && typeof this.data.get(options.rootId) === "undefined") {
      return null;
    }
    var fragmentMatcher = this.config.fragmentMatcher;
    var fragmentMatcherFunction = fragmentMatcher && fragmentMatcher.match;
    return this.storeReader.readQueryFromStore({
      store: options.optimistic ? this.optimisticData : this.data,
      query: this.transformDocument(options.query),
      variables: options.variables,
      rootId: options.rootId,
      fragmentMatcherFunction,
      previousResult: options.previousResult,
      config: this.config
    }) || null;
  };
  InMemoryCache2.prototype.write = function(write) {
    var fragmentMatcher = this.config.fragmentMatcher;
    var fragmentMatcherFunction = fragmentMatcher && fragmentMatcher.match;
    this.storeWriter.writeResultToStore({
      dataId: write.dataId,
      result: write.result,
      variables: write.variables,
      document: this.transformDocument(write.query),
      store: this.data,
      dataIdFromObject: this.config.dataIdFromObject,
      fragmentMatcherFunction
    });
    this.broadcastWatches();
  };
  InMemoryCache2.prototype.diff = function(query) {
    var fragmentMatcher = this.config.fragmentMatcher;
    var fragmentMatcherFunction = fragmentMatcher && fragmentMatcher.match;
    return this.storeReader.diffQueryAgainstStore({
      store: query.optimistic ? this.optimisticData : this.data,
      query: this.transformDocument(query.query),
      variables: query.variables,
      returnPartialData: query.returnPartialData,
      previousResult: query.previousResult,
      fragmentMatcherFunction,
      config: this.config
    });
  };
  InMemoryCache2.prototype.watch = function(watch) {
    var _this = this;
    this.watches.add(watch);
    return function() {
      _this.watches.delete(watch);
    };
  };
  InMemoryCache2.prototype.evict = function(query) {
    throw false ? new InvariantError(7) : new InvariantError("eviction is not implemented on InMemory Cache");
  };
  InMemoryCache2.prototype.reset = function() {
    this.data.clear();
    this.broadcastWatches();
    return Promise.resolve();
  };
  InMemoryCache2.prototype.removeOptimistic = function(idToRemove) {
    var toReapply = [];
    var removedCount = 0;
    var layer = this.optimisticData;
    while (layer instanceof OptimisticCacheLayer) {
      if (layer.optimisticId === idToRemove) {
        ++removedCount;
      } else {
        toReapply.push(layer);
      }
      layer = layer.parent;
    }
    if (removedCount > 0) {
      this.optimisticData = layer;
      while (toReapply.length > 0) {
        var layer_1 = toReapply.pop();
        this.performTransaction(layer_1.transaction, layer_1.optimisticId);
      }
      this.broadcastWatches();
    }
  };
  InMemoryCache2.prototype.performTransaction = function(transaction, optimisticId) {
    var _a3 = this, data = _a3.data, silenceBroadcast = _a3.silenceBroadcast;
    this.silenceBroadcast = true;
    if (typeof optimisticId === "string") {
      this.data = this.optimisticData = new OptimisticCacheLayer(optimisticId, this.optimisticData, transaction);
    }
    try {
      transaction(this);
    } finally {
      this.silenceBroadcast = silenceBroadcast;
      this.data = data;
    }
    this.broadcastWatches();
  };
  InMemoryCache2.prototype.recordOptimisticTransaction = function(transaction, id) {
    return this.performTransaction(transaction, id);
  };
  InMemoryCache2.prototype.transformDocument = function(document) {
    if (this.addTypename) {
      var result2 = this.typenameDocumentCache.get(document);
      if (!result2) {
        result2 = addTypenameToDocument(document);
        this.typenameDocumentCache.set(document, result2);
        this.typenameDocumentCache.set(result2, result2);
      }
      return result2;
    }
    return document;
  };
  InMemoryCache2.prototype.broadcastWatches = function() {
    var _this = this;
    if (!this.silenceBroadcast) {
      this.watches.forEach(function(c) {
        return _this.maybeBroadcastWatch(c);
      });
    }
  };
  InMemoryCache2.prototype.maybeBroadcastWatch = function(c) {
    c.callback(this.diff({
      query: c.query,
      variables: c.variables,
      previousResult: c.previousResult && c.previousResult(),
      optimistic: c.optimistic
    }));
  };
  return InMemoryCache2;
}(ApolloCache);

// node_modules/apollo-link-http-common/lib/bundle.esm.js
var defaultHttpOptions = {
  includeQuery: true,
  includeExtensions: false
};
var defaultHeaders = {
  accept: "*/*",
  "content-type": "application/json"
};
var defaultOptions = {
  method: "POST"
};
var fallbackHttpConfig = {
  http: defaultHttpOptions,
  headers: defaultHeaders,
  options: defaultOptions
};
var throwServerError = function(response, result2, message) {
  var error = new Error(message);
  error.name = "ServerError";
  error.response = response;
  error.statusCode = response.status;
  error.result = result2;
  throw error;
};
var parseAndCheckHttpResponse = function(operations) {
  return function(response) {
    return response.text().then(function(bodyText) {
      try {
        return JSON.parse(bodyText);
      } catch (err) {
        var parseError = err;
        parseError.name = "ServerParseError";
        parseError.response = response;
        parseError.statusCode = response.status;
        parseError.bodyText = bodyText;
        return Promise.reject(parseError);
      }
    }).then(function(result2) {
      if (response.status >= 300) {
        throwServerError(response, result2, "Response not successful: Received status code " + response.status);
      }
      if (!Array.isArray(result2) && !result2.hasOwnProperty("data") && !result2.hasOwnProperty("errors")) {
        throwServerError(response, result2, "Server response was missing for query '" + (Array.isArray(operations) ? operations.map(function(op) {
          return op.operationName;
        }) : operations.operationName) + "'.");
      }
      return result2;
    });
  };
};
var checkFetcher = function(fetcher) {
  if (!fetcher && typeof fetch === "undefined") {
    var library = "unfetch";
    if (typeof window === "undefined")
      library = "node-fetch";
    throw false ? new InvariantError(1) : new InvariantError("\nfetch is not found globally and no fetcher passed, to fix pass a fetch for\nyour environment like https://www.npmjs.com/package/" + library + ".\n\nFor example:\nimport fetch from '" + library + "';\nimport { createHttpLink } from 'apollo-link-http';\n\nconst link = createHttpLink({ uri: '/graphql', fetch: fetch });");
  }
};
var createSignalIfSupported = function() {
  if (typeof AbortController === "undefined")
    return { controller: false, signal: false };
  var controller = new AbortController();
  var signal = controller.signal;
  return { controller, signal };
};
var selectHttpOptionsAndBody = function(operation, fallbackConfig) {
  var configs = [];
  for (var _i = 2; _i < arguments.length; _i++) {
    configs[_i - 2] = arguments[_i];
  }
  var options = __assign({}, fallbackConfig.options, { headers: fallbackConfig.headers, credentials: fallbackConfig.credentials });
  var http = fallbackConfig.http;
  configs.forEach(function(config) {
    options = __assign({}, options, config.options, { headers: __assign({}, options.headers, config.headers) });
    if (config.credentials)
      options.credentials = config.credentials;
    http = __assign({}, http, config.http);
  });
  var operationName = operation.operationName, extensions = operation.extensions, variables = operation.variables, query = operation.query;
  var body = { operationName, variables };
  if (http.includeExtensions)
    body.extensions = extensions;
  if (http.includeQuery)
    body.query = print(query);
  return {
    options,
    body
  };
};
var serializeFetchParameter = function(p, label) {
  var serialized;
  try {
    serialized = JSON.stringify(p);
  } catch (e) {
    var parseError = false ? new InvariantError(2) : new InvariantError("Network request failed. " + label + " is not serializable: " + e.message);
    parseError.parseError = e;
    throw parseError;
  }
  return serialized;
};
var selectURI = function(operation, fallbackURI) {
  var context = operation.getContext();
  var contextURI = context.uri;
  if (contextURI) {
    return contextURI;
  } else if (typeof fallbackURI === "function") {
    return fallbackURI(operation);
  } else {
    return fallbackURI || "/graphql";
  }
};

// node_modules/apollo-link-http/lib/bundle.esm.js
var createHttpLink = function(linkOptions) {
  if (linkOptions === void 0) {
    linkOptions = {};
  }
  var _a3 = linkOptions.uri, uri = _a3 === void 0 ? "/graphql" : _a3, fetcher = linkOptions.fetch, includeExtensions = linkOptions.includeExtensions, useGETForQueries = linkOptions.useGETForQueries, requestOptions = __rest(linkOptions, ["uri", "fetch", "includeExtensions", "useGETForQueries"]);
  checkFetcher(fetcher);
  if (!fetcher) {
    fetcher = fetch;
  }
  var linkConfig = {
    http: { includeExtensions },
    options: requestOptions.fetchOptions,
    credentials: requestOptions.credentials,
    headers: requestOptions.headers
  };
  return new ApolloLink(function(operation) {
    var chosenURI = selectURI(operation, uri);
    var context = operation.getContext();
    var clientAwarenessHeaders = {};
    if (context.clientAwareness) {
      var _a4 = context.clientAwareness, name_1 = _a4.name, version2 = _a4.version;
      if (name_1) {
        clientAwarenessHeaders["apollographql-client-name"] = name_1;
      }
      if (version2) {
        clientAwarenessHeaders["apollographql-client-version"] = version2;
      }
    }
    var contextHeaders = __assign({}, clientAwarenessHeaders, context.headers);
    var contextConfig = {
      http: context.http,
      options: context.fetchOptions,
      credentials: context.credentials,
      headers: contextHeaders
    };
    var _b = selectHttpOptionsAndBody(operation, fallbackHttpConfig, linkConfig, contextConfig), options = _b.options, body = _b.body;
    var controller;
    if (!options.signal) {
      var _c = createSignalIfSupported(), _controller = _c.controller, signal = _c.signal;
      controller = _controller;
      if (controller)
        options.signal = signal;
    }
    var definitionIsMutation = function(d) {
      return d.kind === "OperationDefinition" && d.operation === "mutation";
    };
    if (useGETForQueries && !operation.query.definitions.some(definitionIsMutation)) {
      options.method = "GET";
    }
    if (options.method === "GET") {
      var _d = rewriteURIForGET(chosenURI, body), newURI = _d.newURI, parseError = _d.parseError;
      if (parseError) {
        return fromError(parseError);
      }
      chosenURI = newURI;
    } else {
      try {
        options.body = serializeFetchParameter(body, "Payload");
      } catch (parseError2) {
        return fromError(parseError2);
      }
    }
    return new bundle_esm_default(function(observer) {
      fetcher(chosenURI, options).then(function(response) {
        operation.setContext({ response });
        return response;
      }).then(parseAndCheckHttpResponse(operation)).then(function(result2) {
        observer.next(result2);
        observer.complete();
        return result2;
      }).catch(function(err) {
        if (err.name === "AbortError")
          return;
        if (err.result && err.result.errors && err.result.data) {
          observer.next(err.result);
        }
        observer.error(err);
      });
      return function() {
        if (controller)
          controller.abort();
      };
    });
  });
};
function rewriteURIForGET(chosenURI, body) {
  var queryParams = [];
  var addQueryParam = function(key, value) {
    queryParams.push(key + "=" + encodeURIComponent(value));
  };
  if ("query" in body) {
    addQueryParam("query", body.query);
  }
  if (body.operationName) {
    addQueryParam("operationName", body.operationName);
  }
  if (body.variables) {
    var serializedVariables = void 0;
    try {
      serializedVariables = serializeFetchParameter(body.variables, "Variables map");
    } catch (parseError) {
      return { parseError };
    }
    addQueryParam("variables", serializedVariables);
  }
  if (body.extensions) {
    var serializedExtensions = void 0;
    try {
      serializedExtensions = serializeFetchParameter(body.extensions, "Extensions map");
    } catch (parseError) {
      return { parseError };
    }
    addQueryParam("extensions", serializedExtensions);
  }
  var fragment = "", preFragment = chosenURI;
  var fragmentStart = chosenURI.indexOf("#");
  if (fragmentStart !== -1) {
    fragment = chosenURI.substr(fragmentStart);
    preFragment = chosenURI.substr(0, fragmentStart);
  }
  var queryParamsPrefix = preFragment.indexOf("?") === -1 ? "?" : "&";
  var newURI = preFragment + queryParamsPrefix + queryParams.join("&") + fragment;
  return { newURI };
}
var HttpLink = function(_super) {
  __extends(HttpLink2, _super);
  function HttpLink2(opts) {
    return _super.call(this, createHttpLink(opts).request) || this;
  }
  return HttpLink2;
}(ApolloLink);

// node_modules/apollo-link-error/lib/bundle.esm.js
function onError(errorHandler) {
  return new ApolloLink(function(operation, forward) {
    return new bundle_esm_default(function(observer) {
      var sub;
      var retriedSub;
      var retriedResult;
      try {
        sub = forward(operation).subscribe({
          next: function(result2) {
            if (result2.errors) {
              retriedResult = errorHandler({
                graphQLErrors: result2.errors,
                response: result2,
                operation,
                forward
              });
              if (retriedResult) {
                retriedSub = retriedResult.subscribe({
                  next: observer.next.bind(observer),
                  error: observer.error.bind(observer),
                  complete: observer.complete.bind(observer)
                });
                return;
              }
            }
            observer.next(result2);
          },
          error: function(networkError) {
            retriedResult = errorHandler({
              operation,
              networkError,
              graphQLErrors: networkError && networkError.result && networkError.result.errors,
              forward
            });
            if (retriedResult) {
              retriedSub = retriedResult.subscribe({
                next: observer.next.bind(observer),
                error: observer.error.bind(observer),
                complete: observer.complete.bind(observer)
              });
              return;
            }
            observer.error(networkError);
          },
          complete: function() {
            if (!retriedResult) {
              observer.complete.bind(observer)();
            }
          }
        });
      } catch (e) {
        errorHandler({ networkError: e, operation, forward });
        observer.error(e);
      }
      return function() {
        if (sub)
          sub.unsubscribe();
        if (retriedSub)
          sub.unsubscribe();
      };
    });
  });
}
var ErrorLink = function(_super) {
  __extends(ErrorLink2, _super);
  function ErrorLink2(errorHandler) {
    var _this = _super.call(this) || this;
    _this.link = onError(errorHandler);
    return _this;
  }
  ErrorLink2.prototype.request = function(operation, forward) {
    return this.link.request(operation, forward);
  };
  return ErrorLink2;
}(ApolloLink);

// node_modules/apollo-boost/lib/bundle.esm.js
var PRESET_CONFIG_KEYS = [
  "request",
  "uri",
  "credentials",
  "headers",
  "fetch",
  "fetchOptions",
  "clientState",
  "onError",
  "cacheRedirects",
  "cache",
  "name",
  "version",
  "resolvers",
  "typeDefs",
  "fragmentMatcher"
];
var DefaultClient = function(_super) {
  __extends(DefaultClient2, _super);
  function DefaultClient2(config) {
    if (config === void 0) {
      config = {};
    }
    var _this = this;
    if (config) {
      var diff = Object.keys(config).filter(function(key) {
        return PRESET_CONFIG_KEYS.indexOf(key) === -1;
      });
      if (diff.length > 0) {
        invariant.warn("ApolloBoost was initialized with unsupported options: " + ("" + diff.join(" ")));
      }
    }
    var request = config.request, uri = config.uri, credentials = config.credentials, headers = config.headers, fetch2 = config.fetch, fetchOptions = config.fetchOptions, clientState = config.clientState, cacheRedirects = config.cacheRedirects, errorCallback = config.onError, name = config.name, version2 = config.version, resolvers = config.resolvers, typeDefs = config.typeDefs, fragmentMatcher = config.fragmentMatcher;
    var cache = config.cache;
    false ? invariant(!cache || !cacheRedirects, 1) : invariant(!cache || !cacheRedirects, "Incompatible cache configuration. When not providing `cache`, configure the provided instance with `cacheRedirects` instead.");
    if (!cache) {
      cache = cacheRedirects ? new InMemoryCache({ cacheRedirects }) : new InMemoryCache();
    }
    var errorLink = errorCallback ? onError(errorCallback) : onError(function(_a3) {
      var graphQLErrors = _a3.graphQLErrors, networkError = _a3.networkError;
      if (graphQLErrors) {
        graphQLErrors.forEach(function(_a4) {
          var message = _a4.message, locations = _a4.locations, path = _a4.path;
          return invariant.warn("[GraphQL error]: Message: " + message + ", Location: " + (locations + ", Path: " + path));
        });
      }
      if (networkError) {
        invariant.warn("[Network error]: " + networkError);
      }
    });
    var requestHandler = request ? new ApolloLink(function(operation, forward) {
      return new bundle_esm_default(function(observer) {
        var handle;
        Promise.resolve(operation).then(function(oper) {
          return request(oper);
        }).then(function() {
          handle = forward(operation).subscribe({
            next: observer.next.bind(observer),
            error: observer.error.bind(observer),
            complete: observer.complete.bind(observer)
          });
        }).catch(observer.error.bind(observer));
        return function() {
          if (handle) {
            handle.unsubscribe();
          }
        };
      });
    }) : false;
    var httpLink = new HttpLink({
      uri: uri || "/graphql",
      fetch: fetch2,
      fetchOptions: fetchOptions || {},
      credentials: credentials || "same-origin",
      headers: headers || {}
    });
    var link = ApolloLink.from([errorLink, requestHandler, httpLink].filter(function(x) {
      return !!x;
    }));
    var activeResolvers = resolvers;
    var activeTypeDefs = typeDefs;
    var activeFragmentMatcher = fragmentMatcher;
    if (clientState) {
      if (clientState.defaults) {
        cache.writeData({
          data: clientState.defaults
        });
      }
      activeResolvers = clientState.resolvers;
      activeTypeDefs = clientState.typeDefs;
      activeFragmentMatcher = clientState.fragmentMatcher;
    }
    _this = _super.call(this, {
      cache,
      link,
      name,
      version: version2,
      resolvers: activeResolvers,
      typeDefs: activeTypeDefs,
      fragmentMatcher: activeFragmentMatcher
    }) || this;
    return _this;
  }
  return DefaultClient2;
}(bundle_esm_default2);
var bundle_esm_default3 = DefaultClient;

// dep:apollo-boost
var apollo_boost_default = bundle_esm_default3;
export {
  ApolloClient,
  ApolloError,
  ApolloLink,
  FetchType,
  HeuristicFragmentMatcher,
  HttpLink,
  InMemoryCache,
  IntrospectionFragmentMatcher,
  NetworkStatus,
  ObjectCache,
  bundle_esm_default as Observable,
  ObservableQuery,
  StoreReader,
  StoreWriter,
  WriteError,
  assertIdValue,
  concat,
  createOperation,
  apollo_boost_default as default,
  defaultDataIdFromObject,
  defaultNormalizedCacheFactory$1 as defaultNormalizedCacheFactory,
  empty,
  enhanceErrorWithDocument,
  execute,
  from,
  fromError,
  fromPromise,
  getOperationName,
  lib_default as gql,
  isApolloError,
  makePromise,
  split,
  toPromise
};
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
//# sourceMappingURL=apollo-boost.js.map
